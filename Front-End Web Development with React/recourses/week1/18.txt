Continuing with our explanation of React Components in this exercise, we look at how we can pass information to a child component from a parent component using props, and also we'll look at how we can lift the state up to a higher level component. So, as you saw in the previous exercise, the menu component was being used by the App component in order to render the list of dishes. So, the App component becomes the parent for the menu component. So, if there are other components that will share the same state information as the menu component, instead of storing the state information in the menu component, we can lift the state up to the App component and make it available to all other components, that are children of the App component through props. So, that is what we're going to attempt in this exercise. As a first step in this exercise, I'm going to remove these dishes from this state here, then move it into a separate file, so that my code looks more cleaner and better organized. Furthermore, I'm going to lift the state information up to the App component. So, to do that, going to the source folder, I'm going to create a new subfolder in there named, shared subfolder. Now, I'm going to use the shared subfolder to store all the information that is shared among various components in my React Application that I'm designing. So, in here, I'm going to create a new file named dishes.js file. Now, into this dishes.js file, I'm going to paste in all of the information about the dishes, in the form of an array, and then export it from this dishes.js file. So, if you do that, you can either go to the exercise instructions, and then copy the list of dishes information that I've given there, and then paste it in here. Or alternatively, I have already given you a pretty far better dishes.js file, you can simply download the dishes.js file and then move it into this shared folder. So, here you can see that I have pasted all the dish information into this dishes.js file in the shared folder, and then I'm exporting this constant named the dishes from here, which is an array that contains all the details of all the dishes including additional information. So, as you can see, if I simply paste this information into menu component or js, then, your menu component file will expand so huge. Instead, it is better to store it in a separate file like this and then export it as a constant from here. We are leveraging JavaScript for making our code organization better. So, now, I paste this information in here into the dishes.js file. Now, what I'm going to do is to go into the App.js file and then lift the state into the App.js file. You will see that in the assignment that follows, you'll realize why it is better to store the state information in the App.js file. So, coming into the App.js file, let me first save the changes to the dishes.js file, and then coming into the App.js file, I'm going to import dishes from shared dishes file here. Then, going into the App.js file, note that we need to define the state in here. So, to do that, let me add in the constructor. So, as you'll recall, in order to store the state, you need to define the state in the constructor of the class component, and then build here super(props). This is required, and then we'll define the state here, as this state equals to and a JavaScript object which is dishes, which is the dishes that I have just imported into my App.js file. So, now my state information that contains all the dishes is now lifted into the App.js file. I can make this available to the menu component through props from the App.js file. So, once I have lifted this into the App.js file, let me go down here, and then make those dishes available as props to the menu component. So, I'll say, dishes equal to this state dishes. So, this way the dishes that I have defined in the state for my App component is now made available as props to my menu component. So, I can go into my menu component, and this dishes information becomes available into my menu component. Now, let me save the changes to the App.js file. Now, going into the menu component, I no longer need the dishes in the state of the menu component, because I am receiving that as props from my parent, which is the App component. So, I'm going to clear out the state there, so the code is a lot more cleaner now. Now, in order to make this available for us to use within my menu component, notice that the props are already available for me here. So, in here, when I construct the menu item here, so, I'm constructing the menu item here. Now, when I construct the menu here, instead of saying this.state.dishes, I need to change that to this.props.dishes, and then that's it. My menu component will work just as before. So, let me save the changes to the menu component, and let's go and take a look at our application in the browser. Going to the application in the browser, I can see that my application looks exactly the same as before, no changes. I have simply replaced the use of the state in the menu component by use of the props in the menu component, and everything works just as before. Now, I'm going to go into the menu component and then render this dish information in a different way using cards. So, if you have done the bootstrap course, you know what cards look like. So, we're going to use a card component from reactstrap, and then layout the menu items in a different way, to make it look a bit more elegant. Going back to my menu component, instead of the media object, I'm going to use a card from reactstraps. So, I'll import card, and then cardImg, because I'm going to display an image there, and then I'll also import cardImg overlay. You will see how I make use of that in a short while. Then cardText, and cardBody, and cardTitle. All these components I'm importing from reactstrap, and then I'm going to make use of them to render my dish information in a different way. So, now that I have imported all these, let's go ahead and then fix up the way we layout each dish in here. So, instead of using the media, I'm going to change that to a card. So, I'm going to make use of the card component to do the layout of this. Then for the div that encloses this here, I'm going to say div col-12 col-md-5, change this to m-1. Meaning, one unit margin all around in here. So by doing this, what I am doing to this div is, for the extra small to small screen sizes, I'm going to layout one card below the other in that row. For medium to extra large screens, I'm going to layout cards side by side, each card occupying five columns in my row, in my bootstrap row there. So, that's the change that I have made here. So for the card, now, we don't have the media anymore, so instead of the media object, here, I'm going to use the cardImg to render the image there, card image, and then for this card image, I will give the width as 100 percent, and the source remains as dish.image and the alternator is also a dish.name, so that part remains exactly the same as before. Then this one, I'm going to change this to cardImg. Overlay here. And this part also to card image overlay. So, the media that object that I was using I have changed that to card image overlay here. And then this media heading, I'm going to change that to CardTitle and I'm not going to show the description in the menu here. So, I'm going to remove the description from there. After these changes, let me now go down to the bottom here. And then in here, I'm going to remove this media list here because I am no longer using the media object here. So, I'm going to remove that and I'm simply going to render the menu into this row here. And the menu items are already being formatted into different columns of the row by using this div here. So, let's save the changes and go and take a look at the resulting application in the browser. Going to the browser, you see now how my menu items are laid out on the screen there. So as you can see, instead of displaying a list of items, I'm now showing images of each of the items and then the name of each of these items like this. Of course, the details of each of these menu items is now removed from this list, but this is how this is displayed in a medium to extra-large screen size. If I want to see the same view in extra small to small screen size, we can go to the view and developer tools and then I'm going to click on this and then see the view. As you can see, you can see the responsive view here. So, on a pixel two, what this view looks like on a pixel two device. So, you can see the nav bar there and then the items being layered one below the other because we have used col12 there. So, this is layered one below the other in the view here. That is the layout that we have just created by using the card for my menu items. So, not only that, now the next thing that I'm going to do is if I click on any one of these, I want to show the details of that particular dish down below here. And I'm going to use again the card in order to display the details of the dish. So now, I need a way of responding to clicks on this. So, this is where we're going to use the on click to respond to clicks of these items in the menu. So, going back to my menu component, in this state of my menu component, I'm going to introduce a new property called the selected.Dish which I will assign as null initially. So, the selected.Dish is null initially so which means that I haven't selected any dish. Now, whenever I click on any one of these dishes, then I will make the dish information become equal to the selected.Dish. To do that, let me go into the card here and then for this card, I'm going to introduce the on click method here. So, when this is clicked. So, this is how you respond to the handling of the events that are calloused on your view there. So, inside this onClick. So whenever this onClick is clicked, I'm going to call this function which I'm going to implement in a short while called this.onDishSelect, and then I will pass the dish information as a parameter to that. So, now you see how we can respond to the event that is calloused in my view there. So when I click on the card, that card information is passed into this method called onDishSelect. Now, what do I do in this onDishSelect method? So, I need to implement this onDishSelect here. So, let's go in here and say onDishSelect, and this receives the dish as the parameter. So, when it receives the dish as the parameter, now I want to update the selected dish to point to this dish which is received as the parameter here. So to do that, remember that when we need to change the state, we need to use the this.setState function call. You can't directly say selected dish is equal to dish. Instead, we have to say this.setState and then inside here we'll say, selected.Dish and this will result in whenever this function is called, then this set state will ensure that this selected dish will be set equal to the dish which is received as the parameter here. So, at that point, the selected dish will be set to the dish on which we just clicked on the user interface. So, that's how you change the state of your component here. So, we are setting the selected dish. Now, when the dish is selected, I want to also render the details of the dish. So, I'm going to add in one more method here called renderDish which will be supplied the dish as the parameter here. And then so inside this renderDish method, I will first check if dish not equal to null. So, obviously if the dish is not null, only then I will render the dish. Otherwise, I will simply return a div, an empty div here. So, if you return an empty div, nothing will be rendered on the screen. So, when the selected dish is null, I will return this empty div and nothing will be rendered on the screen. If the selected dish is not null, then at that point we will render the dish here. So, in here we'll say, return. Now, here I'm going to use the card that we have just designed there, the card component. I'll use the card component in a different way to render my dish here. So, inside this card component, we'll render the dish in this way. Let me copy the card image. We are going to use the same approach for the card image, so I'm going to display the card image at the top, and then down below the card image, I'm going to display the CardBody. And in the CardBody, I'm going to display the CardTitle so let me copy this CardTitle from here. So, in this CardBody, I'm going to display the CardTitle and also, I will display the CardText as dish description. So, CardText. So, this is how I construct the card for the selected dish when I render it on the screen there using the card. So, now you see how the rendered dish is returning the card. So, how do I make use of the render dish here? Going down into my code here, right below this, I'm going to define another row here, and inside this row div, I'm going to display the card. So, to do that, I'll say this.renderDish, and supply the this.state.selectedDish as the parameter to that renderDish function. So, when this renderDish function is called, that will return the selected dish in the form of a card, and that will be displayed down below here. So, with these changes, let me save all the changes and then let's go and take a look at our application in the browser. Going to my application in the browser. Now, when I click on any dish, so let's say we click on the second dish here. You will see immediately that the second dish is rendered down below here with the details of the dish as shown here. So, as you can see, the details of the dish. So if I click on a different dish, then immediately that dish information is rendered down below here and so on. With this, we complete this exercise. In this exercise, we have seen several things. We have seen how we can lift the state up to a higher level component and then pass the state information down to the child component using props. We also saw how we can respond to events that are calloused on the UI. In this case, the on click event on any card in the UI, and how we render the details of the dish using the card component from reextract, but this may complete this exercise. This is a good time for you to do a get commit with the message components part two.