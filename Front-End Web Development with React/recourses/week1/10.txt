Before we begin examining React in more detail, let's take a step backwards and ask ourselves a couple of fundamental questions. What are JavaScript frameworks and libraries? Why do we need them? And what do they help us accomplish that we cannot do with standard Vanilla JavaScript? Let's examine a few of these questions in more detail in this lecture first. Now the first question, why JavaScript frameworks or libraries? Now, as you've seen in the previous course, and from your prior experience with HTML CSS is in JavaScript, you can easily accomplish a lot of things using plain HTML CSS in JavaScript or a front-end web UI framework like Bootstrap together with jQuery. Indeed, many complex websites can easily be implemented by using this. Now, then the question comes, why JavaScript libraries or frameworks? Now, to answer this question, the first thing that we need to realize is that when you need complex manipulations of the DOM, especially by fetching data from a server and then update the DOM, it gets fairly complicated using tools like jQuery and plain Vanilla JavaScript. So, that is where the JavaScript libraries and frameworks shine. In the web world, you might have heard people mention about application architectures like the Model-View-Controller approach, or the Model-View-ViewModel, or the Model-View-Whatever approach. And the binding of the model and the view with the use of controllers and the view models. Now, if you haven't heard of these, don't worry, we will examine some of these in a bit more detail as we go along in this course. Also, in the context of React, you might have heard people mention about the flux architecture or a redux way of implementing Reactor applications. Now, what exactly is the role that this plays in developing a full fledged Reactor application? We will examine some of these as we go along in this course. But we realize that for a full-fledged web application, we will need a structured way of approaching this, and so that is where software engineering paradigms like the Model-View-Controller, Model-View-ViewModel, help us to structure our web application. As you implement more and more complex applications, you'll begin to soon realize that there are some standard approaches or standard patterns that you use when you implement your applications, and standard set of functions that you frequently reuse within your application. So, capturing this standard set of functionality into a collection of well-defined implementations of these behaviors or functionalities is what leads you into developing a software library. So, a software library gives you a well-defined collection of implementations or repeated behaviors that you can use to quickly implement complicated applications. And also, this is where the reuse of behavior is of paramount importance for us. And the fact that you can implement your applications in a model or fashion, leveraging the functionality provided by the software library. And indeed, examples of such software library in the web world include jQuery. Now, the next question, what is a software framework and how is it different from a software library? A software framework is an abstraction in which the framework provides a set of generic functionality that you can then customize by implementing it on user defined code. Angular, being an example of a software framework. So, the genetic framework defines a standard set of behaviors that you can then customize to implement your specific application. So, this is where the framework provides a universal reusable environment with a specific functionality and then you can customize that by adding your own specific code. So, again, there are several examples of frameworks, Angular being one of the most popular, you have Ember and Backbone. So with a framework, a framework clearly defines how the application should be implemented and very often, it is highly opinionated in the way the application needs to be implemented. So, you are little bit constrained by the dictates of the specific framework and the way you have to implement your application in order to leverage the generic functionality that is provided by the framework. Let's ask ourselves a few more questions to distinguish a framework from a library next. Now that we have examined a software library and a software framework, you're probably curious about the difference between the two. So, to help highlight the difference, let me draw upon the information in AngularJS documentation in order to distinguish between a library and a framework. So, a library, as we see, is a collection of functions that make it easy for us to implement web applications. So, when you leverage a library for implementing web applications, your code is in charge and then simply calls upon the functions provided by the library in order to accomplish some repeated common behavior. A framework, on the other hand, is a particular implementation of a web application where the framework provides generic functionality and your code fills in the details in order to customize that framework for accomplishing the specific application functionality that you want to implement. So, the framework, in this case, takes charge of the overall functionality of your application, and the framework, in turn, calls into your specific code that you implement in order to customize the behavior to accomplish the specific application functionality that you're trying to implement. Again, Angular, Ember, Backbone are all examples of frameworks. Now, depending on which one you use, the amount of opinionated approach that they take is different, Ember being the most opinionated among them, and Backbone being the least opinionated among these frameworks, and Angular is in between the two. Now, of course, let's ask ourselves about React as we go along in this course. Drawing upon a few salient features of the framework, we see one of the principles of how a framework is implemented, what I refer to as the Hollywood Principle. If you know how Hollywood operates, when actors or actresses want to find work, they approach an agent. The agent typically tells the actor saying, "Don't call us, we'll call you when we need you." So here, the agent takes over the role of what a framework does in the software world. So the framework will call upon their specific functionality that you implement as a web application designer in order to customize the generic functionality that the framework provides. This is where we often hear about the inversion of control. So, as you can notice from the Hollywood Principle, the framework takes control of how the application works and then then framework is the one that decides when and where to call your customized code in order to accomplish whatever needs to be done. So this is where we also distinguish between two different approaches to implementing applications, the imperative approach as opposed to the declarative programming approach. In an imperative approach, the application designer clearly specifies how the work needs to be accomplished or how the application needs to be executed. Whereas, in the declarative approach, the application designer simply specifies what needs to be accomplished and leaves it up to the framework to decide how the work is going to be accomplished. So, this is two different ways of achieving the same end goal. The imperative approach, when you specify clearly step by step, how it needs to be accomplished, as opposed to the declarative approach where you specify what you want to accomplish, but then leave the details up to the framework to decide how it is going to be accomplished. Again, don't confuse yourself too much into trying to read all the details about this. These are some generic principles that govern how these various frameworks and libraries are implemented. But as we examine React in more detail, it'll become more and more clearer how this is actually impacting the way implement our React application. Also, within the JavaScript frameworks world, you often hear people talking about single page applications or rich internet applications. Now, we will look at how we implement a single page application using React as we go along in this course and we'll also understand what exactly is meant by some single page applications at that point. Similarly, we will often hear people, as I said, mentioning about architectures like the Model-View-Controller and the Model-View-ViewModel or the Model-View-Whatever. We'll also examine a little bit more about some of these approaches as we examine architectures that we can use for our React applications, especially the flux architecture redux towards the second half of this course. And we'll also examine how we achieve scalable, reusable, and maintainable JavaScript code and briefly touch upon test driven development towards the end of this course. There are many JavaScript frameworks and libraries that are in use in the real world. Here is an incomplete list of these and you often hear more and more such frameworks being created and being made available for the JavaScript work. So you are pretty soon bombarded with so many different JavaScript frameworks and libraries. And so, how do we navigate through this sea of frameworks and libraries and choose one framework or library that we want to use within our web application development? Again, depending on what is it that you're trying to accomplish, one or the other of these frameworks maybe more suitable for your specific use case. Among these, some of the most popular include React and Angular, Ember, Backbone, and Vue. Having briefly examined JavaScript frameworks and libraries, you are left with the obvious question in your mind, is React a library or is it a framework? Now, we will defer this question to the next lecture in this lesson.