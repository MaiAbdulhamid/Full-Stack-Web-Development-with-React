In the previous exercise, we have scaffolded out a starter React Application using create a React app. Now we want to develop that React application into our own React application throughout the exercises in this course. To get started, we will first configure our React application to make use of Bootstrap. Since we have already learned Bootstrap in the previous course, we might as well use Bootstrap for styling our React components or at least the Bootstrap CSS classes. Furthermore, the JavaScript part of Bootstrap cannot be directly used together with React. Instead, what we would do in this exercise is configure our React application to use a Bootstrap-based package called as Reactstrap. What Reactstrap supplies is Bootstrap components re-implement using React components. And so we can make use of them. Like for example, on the JavaScript-based components and Bootstrap have been re-implemented using React components in Reactstrap. And that is what we will use together with Bootstrap in order to style our various components within our React application. So in this exercise, that is what we are going to be configuring our React application with. To configure our React application to make use of Bootstrap classes, at the prompt type yarn add Bootstrap 4.0.0. Here, I'm using yarn to fetch in Bootstrap. If you choose to use NPM, you can just say NPM, install Bootstrap at 4.0.0 and space minus minus save, to install Bootstrap into your React project. Now once that is installed, then I'm going to pull in Reactstrap. So, I prompt type yarn add Reactstrap at 5.0.0 and then also react popper at 0.9.2. Now these two together will enable us to make use of React components based re-implementation of the various Bootstrap Javascript components. So let me go ahead and install these two into my application. Again, if you use NPM, do NPM install and then these two and minus minus save, instead. Once these are installing into our React project, then the next step is to go ahead and configure our React application to make use of Bootstrap. To configure our React application to make use of Bootstrap, let's go and first open up the index.js file. And in the index.js file, we will import the Bootstrap CSS code here. So, right before the index.css, I'll import Bootstrap/dist/css/bootsrap.min.css. So we are importing this from the node modules folder where Bootstrap has been downloaded, and so we are importing Bootstrap into our application to make use of that within our application. Just like, we imported index.css. Now, note that I am importing Bootstrap first and then the index.css later. So if I add my own customization CSS classes, that can override the default Bootstrap classes if required. So that's the reason why I import Bootstrap CSS first and then index.css later. Now once I do this, then I'm going to go into the app.js file and then reconfigure my React application to make use of the Bootstrap component. Now within my React application, I don't want to make use of these, so I'm just going to get rid of these and then introduce my own Reactstrap based components here. So let me first import Navbar from Reactstrap. And so this is our first Bootstrap component that we import from Reactstrap. React component based re-implementation of the Bootstrap Navbar component that Reactstrap makes available to us. Now this Navbar I'm going to configure within my React applications. So here I'll say Navbar. And if you want to use the Navbar with the dark theme, I just say dark and color primary. So I will use the dark color, with the primary color as the darker color. And then close the Navbar. So this immediately puts in the Navbar Reactstrap component into my React application. Inside there if you'll recall from your knowledge of Bootstrap, I can say, div ClassName "Container". So you know what a div, what a container class does to the Bootstrap. But notice that whenever I use my Bootstrap classes, I should say ClassName, with a capital N here. So that is how we apply CSS cllasses to the jsx tags here. So here div ClassNames. So I introduce a container here and then in there I will say NavbarBrand and href. And then, this should be quite familiar to you from your previous Javascript or rather the Bootstrap course why we have this NavbarBrand here. So notice that Reactstraps re-mplementation of the Navbar and the NavbarBrand here. So let me import NavbarBrand also from reactstrap. So these two components, I am importing, the actual components I'm putting from reactstrap and then making use of them to implement the Navbar into my app.js file. So with this, lets save the changes and then go and take a look at our updated react application in the browser. Now when you save the changes, then since our yarn start command that we executed in the previous exercise, will keep our server up and running and setting up our React application, so it would automatically recompiled whenever I make any changes to my React application and then the update of the React application will be served up by my server there. So I'll going to the browser. In the browser, you now see the updated version of my React application. And it contains just the Navbar here with the NavbarBrand being declared there. Exactly what we wanted in our application. So with this my React application is now updated to use the Navbar and in the next set of exercises we'll further continue to develop our React application. With this, we complete this exercise. In this exercise, we have configured our React application to make use of both Bootstrap CSS classes and also Reactstrap, which is the React, the components based re-implementation of Bootstrap's JavaScript components. And so we are making use of that within our application to construct the various views that we will render in our browser. This is also a good time for you to do a Git comment with the message configuring React.