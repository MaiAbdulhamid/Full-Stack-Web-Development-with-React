In the previous lecture, we had seen some HTML like syntax in the app.js file. At that point, I deferred further discussion to a later lecture. Now, I will introduce you to JSX, or the JavaScript extensions, which is what you actually saw in the code in app.js file. Let's learn a little more details about JSX. Now, I will give you a brief introduction to JSX in this lecture, but as we go along in the rest of the lessons of this course, we will examine more and more details about JSX, as and when we encounter them, and then learn them in the context in which we encounter more about JSX. As we saw in the previous lecture, we introduced a react element which looks like this. And obviously, one look at it and you are probably wondering, what is this HTML doing inside my JavaScript code here? You have never seen something like this before where HTML code gets engulfed inside my JavaScript code. And so, this is the special syntax that react to uses when it expresses the various react elements. Let's examine this and a bit more detail. So, continuing with the discussion about JSX, JSX is syntactic extensions to JavaScript which enables us to express react elements using it HTML like syntax. So, it is a shorthand notation from JavaScript functions that are called, which evaluate the JavaScript object. So, as we will see, the reason for approaching it this way as opposed to having the HTML separate from the JavaScrip code as done in other frameworks used to avoid the artificial separation of the rendering logic from the other UI logic. Very often, what is rendered in the screen is dependent upon the rest of the UI logic controlling the rendering on the screen. In other frameworks like angular, we separate out the template code from the Javacript code, and in some way control the templates from within our JavaScript through various expressions and so on. In react, the two are combined together, so you would see a mixture of both the UI logic and the rendering logic written in single file as you saw in the app.js file earlier. So again, illustrating this with an example, you might see a react element being defined like this in the code. Now, then you'll see this, you obviously notice immediately some HTML like syntax in the code, and some specification of attributes for the HTML like elements and so on. But in reality, this actually gets mapped in react into a corresponding JavaScript object here. So as you can see, this is mapped into a react.createElement. This call to the react.createElement with the three parameters as shown here, will result in a JavaScript object being created. So, that corresponding JavaScript object looks like this. So, your element becomes a JavaScript object with the type specified there, and the props specified. Many of the standard HTML CACs have corresponding react components that are already defined, predefined react components. And hence, we are able to use them freely within our react code. Not only that, there are fact that you are mixing UI logic with rendering logic means that you should be able to easily embed JavaScript like expressions into your JSX code. And indeed that is quite possible with JSX. So, for example, you could easily declare a JavaScript object like this here, and then correspondingly, you can incorporate their properties from this JavaScript object into the code that you render here. So as you can see here, for a div, I'm giving a key attribute as dish.id, which has actually derived from the JavaScript object there. And then correspondingly, you can see the use of the media heading. And then in there written braces, you'll see dish.name being declared here, and so on. And so, this code shows you how JavaScript expressions can be embedded into JSX code, as and when required. Now, we will encounter more of such examples as we double up our react application later, and then at that point, you will see how versatile JSX is for specifying various react element.