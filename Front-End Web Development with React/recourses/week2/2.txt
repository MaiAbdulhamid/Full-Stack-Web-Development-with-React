Now that we have seen, a little bit about Presentational and Container Components. Let's go ahead and reorganize our React application, so that we will implement the menu component as a pure presentational component, and the dish detail component is already a pure presentational component, and we will lift all state information into a container component which we will implement in the exercise. As you work on your project, make sure that yarn start or npm start that you executed in the very first exercice, keeps running continuously, so you can see that my yarn start is running continuously in my terminal here, and then it'll recompile whenever I make any changes to my application. So, you can look at what has been printed on the terminal or command window in order to get an idea, if there are any errors they will be reflected here. Now in this case as I can notice, it says that the 'logo' is defined but never used in the app.js file. So I'm going to go ahead and remove that from my app.js file and clean it up a little bit. Any time you change your code in your application, it will be recompiled automatically, because the yarn start is running, and it is running the compiler behind the scenes keeping a watchful on the files, and then recompile the files whenever any changes are made, and then start summing up the updated versions, from the building server that is running from the create react app script that we have installed early. Going to our application. In the application, in app.jsm, I'm just going to first remove this logo from there, and also I will delete this logo.svg file from there, because I don't need that anymore. SoI will remove that also from my application. Furthermore, going into the components folder, I'm creating a new file here called MainComponent.js. So this would be acting as a container component for my application. Now what I'm going to do is, I'm going to remove much of the work from app.js into the MainComponent.js so I'm just going to copy, that code from app.js and move into the MainComponent.js and then paste it in here, because my main components structure will be very much similar to the app component, and whatever the app component was doing earlier, much of that work I will move it into the main component. So here, I'm not going to be using any styles for the main component because it is not doing any rendering of the views so I don't need any styles here. You're simply making use of the views that are exported by the various components that we already have. Similarly, I will go into the menu component, and then this DishDetail component that I was using in the menu component, and I'm going to cut that and then move it into the main component. So the main component becomes responsible for both the menu, and the DishDetail line. It will do all the rendering on our behalf. With these changes, let's go ahead and rename this as Main component. So class Main extends Main component and the state is stored right there, and within the render function. I'm going to first render the navbar, as we saw here, and will render the menu, and also we'll render the DishDetail component also right below here and then I will pass the dish information right here. Now to pass the selected dish information obviously, I need to know the selected dish in the main component. So, going to the state I'm going to introduce a new variable here called selectedDish, or new property, called selectedDish, and then I will assign that to null here. So, as you notice the selectedDish, I'm going to move that into the main component from the menu component. So, in the menu component I can now remove this SelectedDish completely, and then this onDishselect also I'm going to cut from the menu component, and move it into the main component here. So that, the main component is responsible for everything related to the state of my application. So the selectedDish will also be tracked by the main component, and that is going to be supplied to my Dishdetail component from here. So, once we have done these updates then, you notice that in the menu component I still need to respond to the one click method. So, to help me to do that, from the main component, I'm going to pass in the onDishselect to the menu component. So, for the menu component I'm going to come in here, and then I will say onClick. So, this onClick prop I'm going to pass in from the menu component here. So, say "Menu component onClick". Within the onClick, what am going to do is, I'm going to go to the main component. I'm going to remove this whole thing from there, will fix the menu component a little bit later, and then I'm going to come and paste that into the onClick method. What I would expect for the onClick method to just obtain the dishId. I don't need the entire dish information, because that is already there in the dishes here, so I can easily grab the information about the dish from there. So what I'm going to track is only the dishId, in the state of the menu component of the dishId of the selected dish. So, I'll pass in the dish ID as the parameter to the onclick method here. With this change what I have done is I have passed in the onClick as a property to the menu component, and also this onClick when it is invoked, will pass the dishId parameter, which will come in as the parameter here for the onDishselect, and then I'll say, "This Setstate dishId". So the selectedDish property here is only tracking the dishId, not the entire dish information as we did in the menu component earlier. So we're only going to track the dishId not the entire dish. Now this also means that when I passed the dish information to the dish detail component, I need to go into this dishes array, and then select out the specific dish information, and then pass that to the DishdetailComponent. So to do that, we'll just make use of the array operators in JavaScrip to enable us to extract the details of the selectedDish here. So, for the Dishdetail that I am invoking here for the DishdetailComponent, I'm going to pass in the dish as "this. State.dishes." So from this dishes array, I'm going to select out one dish, that one particular dish is the one for which the dishId matches the selected dish here. So how do we do that? From your knowledge of JavaScript, you can simply say, "This state dishes", and inside here I'm going to supply the ADOL function here. So, again you see me using the essix ADOL function here. So I'll say dishId. So this dish is the parameter. So then I do this state dishes, and then for the dishes I apply the filter option here. So this state dishes filter, and when I apply the filter, this filter will operate on each dish in the dishes array. So I will get access to each dish. For each dish, what I'm going to do, is to check dishId is this the same as this state selected dish? Okay. So this ADOL function, what it does is, it helps me to select out all those dishes for which the dishId matches the selectedDish, which contains the dishId of the selectedDish. So, I will compare the dishId of each dish with that, and then extract the rock. So it does filter function, if you recall from your knowledge of JavaScript this filter function will give the sub array of the dishes for which the sub-array contains are rather, constrained part of the array, or just the elements from the array, for which this property, the dishId matches selected dish. Obviously, you will get only one dish because the dishId is unique for each dish, by that filter function will supply that as an array. So, I will have to select the first item from this array there. So, that's why I'll say zero. So index zero, the item in index zero although, you have to remember that there will be only one item in this array, but still we need to supply that one item. So, by doing this, what we are ending up doing? Is selecting the specific dish, which is the selectedDish and then passing the dish information to the DishdetailComponent. So, with this change I am passing in whatever I need to do to the DishdetailComponent in it's props as dish, and the menu component is also set up appropriately. Now, the DishdetailComponent you have already implemented that as part of your first assignment so it should be working correctly when the dish is passed in as the props to it and one more minor. Change here when you import. Recall that the MainComponent is already in the Components folder. So, I don't need that part. And also for the DishdetailComponent as such. And also, one more minor change we need to import the dishes from dot dot/shared dot dishes because this is in the shared folder which is in the source folder. So, you go up, one level into the shared dishes folder. And of course, one minor error that you would notice is that, this is main class in the MainComponent. So, I should be exporting the main class from the MainComponent not the app class. So with this update, now my main component is all ready to act as the container for my application. Now, this main component is going to be used within that app Component. So, we'll go back to the app Component and then, I'm going to remove all these from the app Component. And so, we'll just import main from the MainComponent and then, I no longer need dishes in the app Component because that is not required. And also, I am not storing any state in the app Component, so I can simply remove the constructor completely and app Components itself receives no props. After these changes, now this Navbar has been moved into the MainComponent so I can remove that completely. And this is just the MainComponent rendered inside div here. With this change, my app component is now ready to simply make use of the MainComponent and then, render the MainComponent and then, return that to index start js file. Now, we need to go and complete the update of the MenuComponent. So, going to the MenuComponent, recall that the MainComponent is passing in this onClick as part of the props to the MenuComponent. So, noting that going into the MenuComponent. I realize that those props are coming into that MenuComponent itself. So, within the MenuComponent, when the card is clicked in onClick. So, this particular line in onClick, when that card is clicked, I will say, an added function and say this props onClick. And this onClick itself takes one parameter which is that dish id. So, the particular dish that has been rendered, that dishes id, I have passed this back to the onClick method that has been sent to me from the MainComponent. And when you go to the MainComponent, you realize that the onClick method is implemented to use the dish id as the parameter, which is then supplied to this onDishSelect, as the parameter here. And one final change in the MenuComponent. Now since, the MenuComponent no longer uses the DishDetail component, so I'm just going to go ahead and remove this DishDetail component completely from the MenuComponent. So with these updates, now my main MenuComponent is also updated. The MainComponent is also updated and app.js is also update. Now, one minor change, that you can make to your DishDetail component. Recall that in your DishdetailComponent, when you are rendering the date, you are simply rendering the date as an ISO string there. Now, I will give you some small snippet of code, which will turn that ISO string into an actual date that can be displayed in a format that is more easily readable. So, going to the DishdetailComponent, I'm not going to show you how I implemented my DishdetailComponent. I'm to hide on that part here. We'll just go into this comment.date here, and this comment.date here, instead of simply rendering the comment.date as a string here, I'm going to use a international date format that JavaScript supports and then, update this. So, we'll update this as new Intl, this is part of JavaScript itself. So, new Intl DateTimeFormat, and then, this date time format takes as the first parameter. The format of the date that you want to display. So, I'm going to use the US style of formatting the date. I'll say en-US, you can supply your own local formatting for the date, if you want here. So, this is how the date, time, format function works here. So, the date, time, format function as you can see, new locales which is the string and then, further options here. So, the second part, is the options how you want to render the date itself. So, for the format, for the date itself. I will say year numeric, month, i will render the month as short. Meaning that the month will be either Jan, Feb, Mar, and so on. So, first three letters of that and then, that date would be rendered as two digit. Again, if you look up the documentation for the Intl DateTimeFormat. A link to which I have provided and the additional resources, you will see why this formatting works very well to print the date. So, this is the format that I'm going to apply to my date string that I have here. So, this will take that date in the ISO format and then, this particular thing, I'm going to apply to the comment.date here. And within the format, what I need to supply is convert this to a new date and then, say Date parse comment.date here, closing. So, one more to close this parenthesis, and so that's it. So, with this change, your date in your DishDetail will be printed out as, say for example, March 3, 1997 and so on, so in that format. So again, this whole string that I am applying here, I have supplied that in the instructions. So, just go ahead and take a look at that string that I've supplied and then, you'll be able to notice what I have done to this. So, this minor change or update to DishDetailComponent. So going into, let me apply the container class to the DishDetailComponent and then save the changes, and go and take a look at the browser. Going to the browser, let me click on a dish, and then you'll now notice that, once you applied the container glass in your DishDetailComponent, it is being correctly rendered, aligned properly with the rest of your view in the browser. Again, click on another dish and then, you can see the details of the dish. Also notice how the date is now being rendered because of the minor change that we did in the DishDetailComponent. So, that's the change that we make to the way the date is rendered in the comments. With this, we complete this exercise. In this exercise, we have seen how we can divide our application into different kinds of components, so we used presentational components and also container component. With this, we complete this exercise. This is a good time for you to do git-commit with the message presentational and container components.