As we learned in the previous lecture, in this exercise, we're going to go into our React Application and then turn the menu component and dish detail component to pure functional components. As we realized, in the previous lecture, we have restructured our application such that the menu component and the dish detail component purely work on the props that they are passed into. They are not maintaining any local state, so they are very good candidates for being turned into functional components. So, if you have a React Application where a component is purely rendering of you based on props, then functional components is the way to go for designing your component. To further emphasize the point about how you could turn a component into a purely functional component, let me take a look at our terminal window or the command window. You immediately notice an interesting comment there which says Line 6 in the MenuComponent.js: Useless constructor. Now, what this is implying is that in the menu component, we have a constructor there, but we are not using it for anything because we are not storing any state or initializing anything there, so the constructor is unnecessary in that. Now as we saw when we designed the app component, we removed the constructor completely from that. So similarly, this is also a suggestion to tell us that we can easily go in and then modify our menu component into a pure functional component. Similarly, they will modify the dish detail component also into a pure functional component. It doesn't take a whole lot of effort to do this as you will see when we implement this in the exercise. Going to our code here, the first thing that we notice in the menu component is we don't need this constructor, so we can just get rid of the constructor completely. Furthermore, we can easily restructure this code into functional components. Not only that, we realized that all this part of the code which is rendering this card here, can be pulled out into its own functional component and implemented here. So, what I'm going to do is, since I am no longer going to implement this as a class component, I'm going to remove that first, and then furthermore, that is no longer necessary. That render is no longer necessary, so I am cleaning up all this code that I don't need anymore. So, I'm going to remove all this from my code, but I will still have the export menu. So after cleaning this up, the first thing that I'm going to do is to pull out this card view from here and then make it into its own functional component. So, we will define a functional component here as shown here. We'll say "function RenderMenuItem." And then inside here, we will receive prompts as the parameter here. Now this is one way of implementing it. Now, if you know what you are going to be receiving to your props, so instead of just typing props, I can simply go in and instead type within braces. Because the process is JavaScript object, so I can even easily specify the various properties that are going to come in as part of the JavaScript object there. So I'll simply say "dish, onClick," and that's it. And this function is simply going to return a view here. So what is the view that it is going to return? It is going to return this card as the view here. So I'm going to just cut the card from here, and then put this into this return function. That is it. Now, my first functional component is ready. So this functional component is simply rendering that menu item based upon the dish information that it is sent and also based on click that it sent. It will ensure that the view is rendered in a react strap card format here. Now, once we have done this, then I can go in and make this part into its own functional component. Now here, I will show you another way of implementing a function component. So we'll define const menu equal to props. And in here. This is another way of implementing a functional component. So here I am using an added function from ES-6 to define this. So, this is the parameter that is going to receive the props parameter. I could easily rewrite this as function like this here. I can say function menu, within brackets, props, but I'm just showing you two different ways of implementing the same thing. Now in there, all I need to do is take us whole code that we have here and then move that into this here. So now, my const menu props. This function is going to return the menu and inside here. Now, this is where I am iterating over all the items. So, here I'm going to make use of the render menu item functional component that I have just implemented up here, and the render menu item takes two parameters. So, it takes the parameters dish which is the dish that has received here. So, this dish and then the second parameter is onclick which is nothing but props onclick. So, the onclick which was sent in by the main component that I am parsing in to the render menu component as the function here. So, I'm just parsing in the function from here into the render menu item component, that does change. I am now making use of the Render menu item functional components to construct the view for each dish and this in turn is inside the div which is going to construct a list of all the dishes, and on that I am now making use of within here to render the menu item. So, no further changes to this here, this remains as such. So, with this simple rearrangement, I have taken my menu component and turned it into a purely functional component. Now, within the menu component, one more change that we need to do is to change this to const menu props.dishes.map because it is not dish.props. So, this props is coming in as the parameter for this function, so this should be props.dishes.map rather than dish.props. Similarly, in the render menu item, we can remove the dish.props and it should be just onclick here, because this onclick is coming in as a parameter here. That's it, but this change my menu component is now turned into a function component. Now similarly, let's go to the dish detail component and then modify that also into a functional component. So, going into the dish detail component, again same thing, I don't need this component anymore. I can remove that part completely from there and then this class component is also removed. We had the render dish function that you implemented earlier, now I'm going to turn that render-dish function into its own component here so, I will simply rename that as function render dish with the capital R. Remember that user defined components always start with capital letters. So, this basically turns this function that we had here in the class component into its own functional component, but when we do this, the render dish no longer gets the dish here. Instead, it'll get the dish in the form of props here. So, I'm going to enclose that within braces to turn that into that, since my props will only receive one property in the props object, so, I'm just extracting it out right there by simply defining that parameter as an object which contains dish here. Similarly, going to the render comments component, the render comments component also I'm going to turn that parameter into comments, and then I'll turn this also into a functional parameter with a capital R render comments and that's it. So, now we have two functions here, functional components render dish and render comments going down into my code here, I will simply remove this render function and then turn this into a function component called dish detail. Again, notice how I am changing this into a functional component. Now, once I change that into a functional component, in here I have to turn this into a call to the functional components. So I will say, render dish and will say, dish, props dish here, and similarly, the next line, we just turn that into render comments equal to (within braces), props dish comments, that is it. With these changes, both my dish detail component and the menu component are now updated to be functional components. Also, this should be just props.dish rather than dish.props start dish, because props is coming in as the parameter here. Let's save the changes and go and take a look at this in the browser. Going to the browser, you can now see that our application is rendering just as before. When I click on an item, then the details of the item are displayed down below, just like before. So, by turning our menu component and dish detail component into functional components, we have not changed any of the functionality of our application, our application behaves exactly like before. But, we see that we have a simpler way of implementing the functional components. With this, we complete this exercise. In this exercise, we have learnt how to define functional components and then modified our React application to make use of functional components. This is a good time for you to do a bit comment, with the message functional components.