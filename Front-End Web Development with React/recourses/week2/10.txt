Let me now give you a brief overview of single-page applications. What are single-page applications? How are they different from the websites that you might have developed earlier? For example, the website that you developed in the previous course of this specialization, where you had multiple pages. Why are single-page applications interesting? What is it that you need to be aware of when you're designing single-page applications? This lecture is not intended to be an entire treatise on single-page applications, but will give you enough introduction to get you started on thinking about single-page applications. Before we understand single-page applications, let's take a step back and look at how traditional websites work. In traditional websites so far, if you visit a website, you may be requesting for access to a particular page. For example, you will be requesting for an index to an HTML page when you navigate to the website either by clicking on a link or by typing the address of the website into the address bar of your browser. So typically, the index.html page is the first one that your fetch when you visit a website. When the page is downloaded from the server to your browser, and then this will be displayed in your browser. Now, this may include not just the index.html page but also other resources that may be needed to be downloaded in order to construct the index.html page. In this case, the index.html page may require additional resources like images or data to be downloaded before the index page can be constructed. But now subsequently, if you navigate to another page in your website, say for example, another page like contactus.html, this will result in your browser sending another request to the server to fetch the second page. So it will initiate an entire requested server and then all the resources needed for constructing the second page will have to be downloaded from the server. So as you move from one page to another page, it will involve every new page to be loaded from the server and this would involve a roundtrip time to the server to fetch all the resources required for constructing those pages. Now, imagine that your website has many pages then obviously, every single piece that your web page requires for rendering will require a full roundtrip time to the servers. What you would notice often is that many of these pages have a lot in common. Perhaps for example, the header, the footer and some other piece of information, but still every single new page request will require you to go and fetch the entire page from the server. Now with the use of caching on the browser site, you can mitigate some of these problems by reusing the already fetched resources from your cache, but still every new page that you navigate to will require an entire page to be reloaded from the server site. Single-page applications approach this problem in a different way. In a single-page application, typically, we have developed a web application. So, when the browser navigates to the website, then this will request for the web application to be downloaded from the server site. So this will be, for example, contained in a master page like index.html, which will trigger an entire set of assets that are required for rendering your web app to be downloaded to your client's site. Now how these assets are packaged depends upon how you design your application and also, what framework you use to design your web application. But nevertheless, you have one single large download at the start of your web application. Subsequent changes to the client site, for example, initiated by a click on a link, will initiate a new request to the server site. But in this case, very often you're only downloading some data, perhaps in the form of JSON data from the server site. So in this case, each of these may require only access to a server just to download the JSON data for example, which then may enable you to completely render the new view in your single-page application. So the initial page download, the initial application download, of course is always there but most subsequent interactions with the server will be simply for downloading data, typically in the form of JSON or XML depending on how you design your data format. Once the data is downloaded, this data can be then used to render the new view within your application. So in this circumstances, you will save a lot of roundtrip time to the server for downloading a lot of assets. That indeed is the significant feature of single-page applications. Now, with pre-rendering of some of the views on the server site itself, you can even mitigate some of the initial downloading time for your web application. So, we can summarize that single-page applications has a web application or a website that fits into a single page. Again give or take, don't interpret it too literally, so you don't need to reload an entire page again. So that is the significant feature of a single-page application. Also, single-page applications enable you to deliver a user experience that is more closer to what they see with desktop applications. Once the initial web app is downloaded, thereafter, most other interactions would seem like you are interacting with a desktop application. So to summarize what we have just learned. What is a single-page application? A single-page application is a web application or a website that fits into a single page. You don't need to reload the entire page every single time a user interacts with the application. The UX is more like a desktop or a native application. Most of the resources required for your application are downloaded at the first instance itself by the first page load, thereafter, only parts of the page are redrawn based upon how the user interaction happens without requiring a full server roundtrip for fetching all the resources that you need. Of course, this doesn't come without its own set of issues that need to be addressed. So when you design single-page applications, one of the first things that people often question about single-page applications is that they are not optimized for search engines. So if you have search engines that crawl your website to extract data and index information, then single-page applications may not necessarily be cooperative in this case. But, even search engine optimization with the current day framework have come far down the road. The second issue to be addressed is, how much of the web construction should be offloaded to the client site as opposed to the server site? So, the server is pretty much acting as a data source in single-page applications and much of the work is offloaded to the client site. From one perspective, this gives you much more scalable way of delivering your web application to your client site because much of the rendering work is done on the client site. Now you can optimize this to some extent to offset the initial download of the web application from the server site by doing part of the rendering on the server site. The third aspect is how to maintain history. So when you click on a back button or a forward button, where would you take the user to? Do you save enough information that you'll be able to navigate among the different views of your application and so on? So that is one thing that you need to keep in mind. The final question that we have is analytics. How do you support analytics on your web page? How do you collect the analytics data and so on? Also as I mentioned earlier, speeding up the initial page load is something that is of concern when you are designing a web application. So you can mask a little bit of the initial download time for the web application by doing partial rendering from the server site itself.