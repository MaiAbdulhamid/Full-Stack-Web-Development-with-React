So far, we have been always implementing React Components by using a class component. We have been sub-classing the React Component class and then defining our own components the way we implemented the Menu Component and also the detailed component and the main component. Now, for components that simply work only using their props that are sent by their parent, there is an even simpler way of implementing the components what are called as Functional Components. Then we implement a simple function that returns a bunch of react elements. Let's look at this in a little more detail next. Again, looking back at the way we have been implementing components so far, we have been extending the React Component class and then defining our components. And also, when we do that the class requires to implement this method called as the render which returns the view. So, inside the render we were including a written statement within which we were returning the group of react elements that define the view for this component. And we also notice that when we define a class component we can define the local state and this local state is defined in the constructor and then we can also operate the local state and so on. So furthermore, a class component gives you access to certain special methods called as lifecycle hooks. We will talk about lifecycle hooks a little bit later in this course. But if your component is a very simple component and doesn't require this much of elaborate implementation, there's a much simpler way of implementing React Components. This simple way of implementing React Components is called as Functional Components. In a Functional Component the easier way of doing this is to simply define a JavaScript function that returns either one react element or a collection of react elements too that defines the view that this component is supposed to render. So, a Functional Component is a lot more simpler way of implementing the component where you don't need a local state, where you don't need access to life lifecycle hooks. So, this Functional Components simply receives props as it's parameter. So, within the props all the attributes that we define, all the component will become available within our component, and we can make use of them when they render the views. But the only restriction is that Functional Components cannot have any local state and cannot have access to the lifecycle hooks that we will talk about later. So, in many cases you might have a simple React Component that just simply renders the view based on the props that it is sent to and a Functional Component, it is a much easier way of implementing a React Component. So, we will go back to our application and then restructure our application to simply use Functional Components. We will notice that our detailed component, the Menu Component can easily be turned into pure Functional Components without losing any of the functionality of our application.