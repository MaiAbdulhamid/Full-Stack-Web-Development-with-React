We have just learned about single page applications in the previous selection. Also, in the Riak router exercise in the previous lesson, we had already configured our Riak application to make use of Riak router to enable us to navigate between various views or various pages of our Riak application. So we already have all the set up required for a single page application. Now in this exercise, we're going to add in one more component into our Riak application called the contact component. You already saw that we had interviews for different links to four different views into our header component in the previous exercise. So let's add in the contact component, we believe the about component for you to complete in that second assignment and also, we will add in some interesting code into the home component so that we can display some and interesting information in the home component. So, all these steps we will complete in this exercise in order to further develop our Riak application into a single page application. To get started on this exercise, let's go into our project and in the components folder, we will add in a new file named ContactComponent.js and into the ContactComponent.js, I'm going to add in a new function, functionally component called Contact Component. Now, I would suggest that you simply copy the code from the exercise instructions and paste it in here because there is a whole lot of JSX code that defines the view for this contact component so let me go ahead and copy and paste that code into here and then we'll quickly look at the contact components called structure. So here, you can see that I have listed in the code for the contact component so as we see they are implementing it as a functional component here and then we are importing Riak. And then inside here, I am defining a few things. Some information to be shown in the contact component and then I'm exporting the contact component here. Now when you look at this view, you will begin to see how this view is developed. Now in the bootstrap course, we have done this already so this should look familiar to you if you have done the bootstrap course. It is exactly the same contact component that we are recreating in Riak JS here. So after adding in the contact component, let's go ahead and integrate that into our Single Page Application. So to do that, go into the main component and let me pull in the contact component in here so I will import contact from ContactComponent. Then, since we have already fixed the links for our header component and for the component to enable us to navigate to the ContactComponent, all that we need to do here is adding one more route here that will help us to navigate to that ContactComponents. So going in here, let me add in Route exact path contactus and the component's name is the contact component that we have just created. That's it. So if you have a component that you are going to use but you don't need to pass in any props to the component you can simply call that component directly here like this. So this is another way of specifying the contact component for us. So with this, my contact component is now integrated into my application. Let's say the changes that go and take a look at what the contact component looks like. Taking a look at our application in the browser, you can see that we now have the home component. Let's go to the contact component and see what the contact component looks like. So going into the contact component, you can see that the contact component has this information that we have just added in here. We have a button group here, we have an address here and some other information here. So this is what the contact component that we just added looks like. Now navigating back to the home component, we see the home component. Of course, our next step would be to fill in the details of the home component so that it looks more elegant than just displaying just one single word there called Home. But to do that, we need to add in some more additional data into our application. Going back to the application, our first step in this would be to go into the share folder and then I'm going to replace those dishes.js with an updated dishes.js where I removed all the comments and then stored them separately. So, replace those dishes.js with the updated information in dishes.js that was given in the instructions or download the updated dishes.js file that I have given to you in the instructions and then replace those dishes.js in the shared folder. So let me complete that first. Similarly, adding three new files here called comments.js, promotions.js, and leaders.js. Now, into these three files, comments, leaders and promotions, you can just copy and paste all the JS data that I have given in the instructions. Alternately, you can download the completed versions of comments.js, leaders.js, and promotions.js that I have given to you in the exercise instructions. Whichever way, update these four files in the shared folder so that the data that is enclosed there can be used within our application. So let me go ahead and complete these and then we'll come back to start continuing to update the home component. So here, you'll see that I have pulled in and pasted the data into the leaders.js, the promotions.js, and the comments.js. So that it contains the data that I can use within my Riak application. Eventually, we will move all this data to a server from which we will download over the network and then make use of it. But, for the moment because we need to update our views of our various components and pulling in the data into my application. So after updating dishes, comments, promotions, and leaders.js file, now, we can make use of this information to construct our home component. Let me save the changes just before we update the home component. Let me go to the main component, and that in the main component, I'm going to pull in the comments. Promotions and dishes in here. So, the next one would be {COMMENTS} from '../shared/comments' and {LEADERS} from '../shared/leaders' and finally, {PROMOTIONS} from '../shared/promotions'. And then after this, we will add in three more properties to the state. We'll say, COMMENTS, PROMOTIONS, LEADERS. So now, my state contains dishes, comments, promotions and leaders. Now, in the home page, I am going to be rendering a featured dish, a featured promotion, and a featured leader. So, what I will do is in this homepage that I have constructed here, the homepage functional component that I've constructed here where I am using the home component, I'm going to pass in the three as the attributes or rather the props for the home component. So, first one I say, ''Dish''. Now, how do we select the dish that we want to render? If you go into dishes.js file, you will see that in the dishes.js file, there is a property here in each of the Json structure or JavaScript object here called the feature. If this feature is true, then that particular item will be featured on the homepage. Notice that for the remaining ones, the feature is false. Now, how do we extract out this one from the dishes array? So, this is where we will make use of the filter all the filtered operation in JavaScript to extract that out. So, we'll say, {this.state.dishes.filter}. Now, what kind of filter am I applying? The filter that I'm applying is, all those ((dishes) for which dish.feartured)}. So, all those dishes for this dish featured is true. So, meaning that because the feature is either true or false, so all those for which the dish feature is true extract that out and then that will be returned, filter returns that as an array. So, I'm going to select the very first word. Now, if you arrange your data properly, there'll be only one item for which feature will be true and the remaining ones the feature will be false. So only one element will be there in the array. But in any case, since it is an array, I'm going to take the first element out of that array. So, at the index zero and then return that value. So that's how I construct the dish from there, so extract the feature dish. Now if you're going to promotions, you'll see that there's only one of them there and for each the feature is set to true, and in leaders also, you will notice that for one of them, the last one, the feature is set to true. So, I want to extract that out and then pass in the featured, leader feature promotion and feature dish to the home component. So, I have passed in the dish. Let me pass in the next one which is the promotion. So to save myself the trouble of typing everything again, and I'm going to copy the dish here and then edit that as saying, promotion={this.state.promotions.filter((promo) => promo.featured) [0]} and then the next one would be leader={this.state.leaders.filter((leader) => leader.featured) [0]}. So, the featured leader, the featured promotion, and the featured dish, I will pass these three as props to the home component. So, now I need to go and fix up the home component to make use of this. So, going into the home component. Now within the home component, I am going to be receiving all these three information here. So, how do render this in the home component? So, this is where I'm going to go into the container here and then say, <div className= "row a lign-items-start''. Again, this is a bootstrap class that I'm applying and say </div> here. Now, what I'm going to do is I'm going to implement a nether component called RenderCard component inside here and then make use of it to render the feature dish, the feature promotion, and so on. So, that I will enclose it inside a column class. So I will say, "col-12 col-md m1'' So margin one all around. So, inside here, the first one I will say, <RenderCard item= {props.dish} Recall that the home component receives the props and the props.dish, props.leader and props.promotion will become available here. So, that one, I am passing it in as props to my RenderCard function that I would implement here. So, this one will show the feature dish. Now, I will similarly, let me add in the featured {props.pro}. Promotion and then props.leader. So, I'm using a single function component called render card, which is going to render a card, and I'm passing in the dish promotional leader. It just so happens that the dish promotion leader had exactly the same structure in the way the code is implemented. So, then you are going to dishes.js, you'll see ID name, image, category, and all these things. Then, when you go into promotions you will see exactly the same properties for that, and also in the leader. This facility, it's me using one single function component called render card, which will allow me to render all these three here. The only difference is for the leader, there is an additional property called designation and an additional property called as an abbreviation. So that's something that we need to note. These two don't exist for promotions or dishes. Okay, so with that in mind, let's go ahead and implement another function component here. Now, since this function component, I'm going to use it only within this home component, I'm keeping it here. But you can put the render card into another component file, and then make use of it from there by importing it here. But in this case, since I am using it only in this component, I'm going to just implement this here. So, render card here. Now, this render card will receive props here, and the props will contain just one property which is item. So, I'm just going to extract that item out right within the properties itself. So if you declare the incoming thing like that, that item will immediately become available to me for use. So, inside here, I'll say "return". What does the render card do? It creates a card. So to create a card, I need to import Card, CardImg. So, again, from 'reactstrap'. If I add the same, what happens is, as I type things here, I will get suggestions automatically. CardText, CardBody, CardTitle, and also CardSubtitle. I'm going to use all these components from "reactstrap' in order to render my Card, Card, CardImg and so on. So, how do we render a card? I'll say Card, and inside this Card, we will first create CardImg. Now, for the CardImg, it takes the source as item.image. Then, alt, alternative is item.name. So, we'll display the image on top and then we'll say CardBody, then below, we'll show the CardBody here. For the CardBody, I'm going to show CardTitle. In the CardTitle, I'll show item.name. Hint, below here, this is where I will introduce some JavaScript code inside my JSX. My JSX allows me to mix it with JavaScript code, so I'll say item designation. If item designation is not null, then I will render that as CardSubtitle, and then we'll say item designation. Recall that item designation exists only for the leader. For the other ones, I don't have it, so I'll just put null there. So, if item designation is not null. So if item designation exists, then I will then render it as CardSubtitle, otherwise, I will render it as null. So, if I put null, that means that this will return a JSX as null. So no element will be returned here. So, little trick there to mix in some JavaScript into my JSX. This is what JSX brings to us. So JSX allows us to do these kind of things in our code itself. So, below that, I will then use CardText to show item.description. That's it. So my card is now constructed. The same card structure can be used to render both my featured dish, promotion, and leader. Now, for the leader, since we have the designation, I'm going to render the leader's designation using the CardSubtitle as shown. That's it, my Home component is now updated. Let's save the changes and going to take a look at the updated application. Going back to my application in the browser, you now see that my Home component is now replaced by a more interesting view here. So, we have three cards here shown one next to another. First one showing dish, second one showing the promotion, and the third one showing the featured leader. Also notice that, the CardSubtitle is used to show the leader's designation here, and note that this thing is missing in the promotion and the dish here. So, little trick to help us to display all these things within my home page. Now, my menu page exists just like before and my Contact page exist just like before. About Us page, I haven't implemented that. That will be part of your second assignment. With this, we complete this exercise. In this exercise, we have seen how we can integrate our latest components into various views of our single page application. Then, since we have already configured our application to use React router, it is very easy to retrofit that into a single page application, rendering in this case, three different components and we are able to navigate to the three different views using the links that we have already built into the header and the footer component. With this, we complete this exercise. This is a good time for you to do a Git commit with the message, single page applications part one.