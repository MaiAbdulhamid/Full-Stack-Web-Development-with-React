In this exercise, we're going to add in a little more of details to our React application that we have been working on. We will add in Font Awesome based icons to our React application, and also add in a header and footer for our application so that it gets a nice, clean structure for the views within our application. To get started on this exercise, let's first install Font Awesome into our React application. So to do that, add the prompt type yarn add font-awesome 4.7.0 or do NPM install font-awesome 4.7.0, minus, minus save. And once that is installed then we'll also add in yet another CSS classes based NPM module called Bootstrap-Social which allows us to create social media buttons in our application. So to do that add the front type yarn add bootstrap-social@5.1.1 or do NPM install of the same. So once that is completed, then we'll go ahead and update our application to make use of both Font-Awesome and Bootstrap. So going to our application, let's open up index.js and the import Font-Awesome and Bootstrap Social so that we can make use of it within our application. So import font-awesome/css/font-awesome.min.css. And also import bootstrap-social/bootstrap-social.css. Now, our application can make use of both Font-Awesome and Bootstrap-Social. Next, going into the components for React, we will add in a header component and a footer component. The reason for adding a header and footer component is so that all our pages in our application they get the same header and footer. So going into the Components folder, let's add in the file named HeaderComponent.js. And in the HeaderComponent.js, let's set up the header for our application. So we'll say, import React { Component } from 'react'. So in the header, what I'm going to do is I'm going to move the Navbar from Main Component into the header and also create a footer here. So in the header, let's create a class named Header which extends the component and then in here as you realize when you create a class component, you need to implement the render method here. Now the reason for creating this as a class component as opposed to a functional component will become more clearer when we go to the next exercise because we need to maintain some UI state in the Header Component. So in here we'll return, in here we can make use of what is called as React fragment which enables us to group together a bunch of React elements and then return it. Now when you use a React fragment here this is the short form syntax for using the React fragment. The long form would be to say, React.Fragment like this here. Now I'm going to use the short form for this and this enables us to group together a bunch of React elements and then return it. And also ensures that their alternative they're going to use a div to enclose all the React elements. Now if you use a div that'll add in one more node into our DOM by using the React fragment, you don't add in an extra node into the DOM, you just add in the React elements directly into the DOM. So that's the reason for using the React fragment here. So inside here I'm going to go into the Main Component and then I'm going to cut out the Navbar and the NavbarBrand from here and then move it into the Header Component. And also from the Main Component, I'm going to remove the Navbar from the Main Component and then move it to the Header Component here. Because that is where we're going to be making use of the Navbar element. So the header will contain the Navbar for our application. At the same time I'm going to remove this color primary from the Navbar because I'm going to define my own CSS classes such that the Navbar dark color would be determined by myself here. And also, I will import one more reactstrap component called the Jumbotron. Now using the Jumbotron, I'm going to create a Jumbotron into my header here, the Jumbotron allows me to specify some information that can be displayed at the top in my header. Now it'll become more clearer to you once you see what the Jumbotron looks like. If you have taken the bootstrap course, you know what the Jumbotron does. So that's what we're doing inside here. So in the Jumbotron, let me add in a div here for the container. And then inside the div, I will add in another div with the class name row and then row-header. Now the row-header would be a CSS class that I'm going to introduce into my application a little bit later. So inside here row-header and then in here I will introduce a column class here, column div here and inside this will define some content that goes into the Jumbotron. Se we'll say, h1 and then P. Now if you want to, you can simply copy and paste this sentence from the exercise instructions. There has just some content for my header, here. A simple sentence to describe the Ristorante. So, with this, we have added in a header component into our application, and then, don't forget to export the header from here. And once we have done that, we will import the header component into the main component and then, use that in the main component. Now that we have designed the header component, let's go into main component and then, import the header component from the header component file, here. And then, we will make use of the header component in our main component, here. So, right there, I would introduce header component into our application. Let's save the change and then, go and take a quick look at our application in the browser. Going to the browser, the browser points out that it doesn't understand this. So, from the fragments documentation in the React site, it says the short syntax may not be understood by all the popular browsers. So, let me go ahead and change that to React Fragment. So, going to header component, let me rewrite this as React Fragment instead, and then, save the changes, and then let's go and take a look at our application in the browser. Going to the browser, you can now see how the jumbotron is added into our application. You see the header has disappeared. It's because we haven't applied the proper color to the header. I removed the color primary from the header, so that's why it has disappeared, but we're going to fix that a little bit later by adding in some CSS classes. And, you'll see the header with the jumbotron display there and then, the content right there as before. So, continuing to work on our application, let's add in a footer to our application. To add in a footer to our application, go into the Components Folder again and then add in the FooterComponent.js file here, and in footer component, let's import React from React. And then, they'll define the footer component as a function component. So, they'll return from the footer, the details of the function component, and then, export footer from this. Now, the content of the footer itself, you have a long set of code and it is more easier for us to just simply copy that from the instructions and then, paste it in here. So, let's go ahead and copy that from the instructions and then, paste it into this location. So, we are back in the footer component and I have already cut and pasted all the codes from the instructions in here. Because it's such a long piece of code, I feel that it is more easier just to copy and paste the code from there. Now, this code should be familiar to those of you who have done the previous Bootstrap course because that is how we define the footer in the previous Bootstrap course. After this, let's go ahead and import the footer into our main component, and then, apply it to our application. So, we'll import footer from footer component, and then, let me go ahead and add the footer to our application after the dish detail here. So, we will add in footer into our main component, and then, let's save the changes. Taking a look at our application in the browser, you now see, along with the header, you'll see a footer for our application, but it is not clearly delineated. Let's apply a few CSS classes so that our header and footer come to life with vibrant colors. Going back to our application, in the App.js file, we already have the App.css imported there. So, going into App.css, I'm going to add in a few more CSS classes. Now, even for this, I would suggest you copy all the CSS code from the instructions and then paste it into App.css file. So, here, I have pasted the CSS code in here. You can see that I have defined a row header, a row content, and the footer, and the jumbotron here with some of my own colors, and address, and the navbar dark. And then, let's save the changes, and then, this should apply the CSS classes to the element that I have included in my React application. If you have taken the previous Bootstrap course, you are familiar with all the CSS classes because we have used exactly these in the previous course. After saving all the changes, let's go and take one final look at our modified application. Going to the application in the browser, we can already see how this application is now defined here. So, you can see that the navbar has a new dark purple color, the jumbotron has a light purple color defined here and clearly delineated, and then, down below here, we have the footer for which we have also applied the appropriate background color with the CSS classes that we just defined. And also, this is the use of bootstrap-social. So, it allows us to create social media buttons in our application which you have already learned in the previous Bootstrap course. So with this, our application is already getting a nice structure in place there, with this may complete this exercise. In this exercise, we have done some bookkeeping and adding in a header and footer to our React application to give it a nice clean definition. We added in our own CSS classes and then, applied them to some of the React elements, and also, we use Font Awesome and then bootstrap-social classes to design bootstrap-social buttons in our footer. We will continue to use the Font Awesome icons in the header in the next exercise. Also, we have seen the use of React Fragment in this exercise. This is a good time for you to do a git-commit with the message, header, and footer.