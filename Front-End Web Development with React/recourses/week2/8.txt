A typical React Application may consist of multiple quote unquote pages. Meaning that you have multiple views and you want a way of navigating among the views. Then, we develop any website for example. A website canters of multiple pages and we provide the navigation tool, the use of a navigation bar or links to be able to go to the different pages of our website. Now, within a web application also, you might have multiple pages and you want to be able to navigate among the views that are rendered by these various pages. So, this is where the React Router comes to our aid. The React Router module, we install it into our React Application and then take the help of the various features provided by the React Router module to enable us to navigate among the views of our application. Let's learn a little bit more detail about this. Later on, we will learn more about single page applications in the next lesson. Then, we will see how we can leverage the React Router to implement the single page applications. Continuing with our discussion of our React Router, a React Router is a collection of navigational components. These are React components themselves and these React components enable us to navigate among various views or navigate among various pages. Now, the React Router itself provides larger components than route matching components and a navigation components. We'll look at the use of each of these kinds of that Route components and how we employ them for providing navigation among the views of our application. The React Router itself supports a browser-based bookmarkable URLs for all the pages that we have written our application, and each view itself will have its own associated URL. And so, you need to be able to interpret this URLs in a way that you navigate the different pages of your application. Now when we study single page applications, it will become even more clear that even though your web application occupies one single page, internally, the views can be navigated amongst each other. And the navigation is effected by the use of bookmarkable URLs. Now when you use URLs to specify which view of your application to navigate to, you also may passing parameters through the URL quote unquote links that we define. Now again, this will become even more clearer as we make use of React Router in the exercise that follows this lecture. To provide Web App Routing, we first install the react-router-dom into our React Application. So since we are implementing a web application, we'll use react-router-dom to implement the react. And this makes available to us a Router component and one of the router components is a BrowserRouter component. So this BrowserRouter component will be applied within one of our components in our application, and this enables the BrowserRouter to provide us with a specialized history object that enables us to navigate among the pages just like the way we navigate among the various pages in a website. If you are using a static file server, then there is a corresponding component called the HashRouter which enables you to do navigations to URLs that contain hashes. In our application, we'll be using plain URLs without the hash. So, that's why I will apply that BrowserRouter component in order to provide the navigation among the previous views. And thus, BrowserRouter encloses your app. Now, in order to determine which view to navigate to as I mentioned, the URLs are a way of identifying which view to navigate to. So, this is where the route matching components provided by React Router come to our help. The route matching components include the Route and the Switch. The route component enables us to specify a path property which specifies the current location's pathname. So, this is the URL part that will be interpreted to represent a particular view. So, each view will be identified by its own URL. And the route components prop, specifies the corresponding view of the application. So, we would be specifying a path and also the corresponding component to which you navigate to when this path is used in the URL. Now, you can also apply the exact attribute to the Route component and this will ensure that the URL exactly matches when we navigate to that. You could also provide a default by using the redirect components. So, the redirect will specify the default URL to which you'll be redirected if any of the other parts do not match with any of the routes that you specify within application. Now, if you have a bunch of routes that you specify, bunch of route components, you group them together using a switch component. So this way, whenever the URLs are navigated to, then this will iterate over all the children to find that particular component or that particular route that matches the URL and then appropriately navigates to that view. Again in the exercise, it'll become even more clearer how this is useful. Within your application, in order to provide a clickable way of navigating to the various views of your application. Now, if you are using a website for example, you use the A tag with the href in order to provide the links, to which you navigate the different pages to which you navigate. In a web application, you use the link or the Navlink component that is provided by the ReactRouter which enables us to specify the link for the various quote unquote go URLs and the corresponding views within your application. So when you use a link tag, then it will render it as an A in the HTML so, a click on that will enable you to navigate to that particular view within your React application. In NavLink, when we use that in our application, we'll also add an active CSS class to their particular link that you specify whenever the prop matches that particular link that is specified. So that way, when you want to identify which particular quote unquote page you are in in the navigation bar, then the NavLink enables us to do that. In Bootstrap, we had also learnt about how to apply the active CSS class to a particular link in our navigation header to highlight that particular link, to identify which page we are currently in. So, the same kind of feature is supported by the NavLink that is provided by ReactRouter or the react-router-dom that we will use in our application. So with this quick understanding of ReactRouter, lets proceed ahead to the next exercise where we will take our react application that we have been working on and then enable us to navigate between the various pages of our react application.