In the React-Redux-Form lesson in the previous module, we had introduced you to the React-Redux-Form Package and we saw how we can make use of the local form to create a React-Redux-Form in our application, and then we saw that the state is mapped into the local state of the component. Now, if we want to make use of the full power of the React-Redux-Form whereby the form state is persisted in the Redux store instead of in the components state, then we need to update our form to make use of the regular form rather than the local form from the React-Redux-Form. So in this exercise, we will go ahead and update our application in the context component that React-Redux-Form that we introduced there to enable us to make use of the full power of React-Redux-Form. To help us to get started on this exercise, go to the redux folder and then create a new file there named forms.js. In these forms.js5, let's explore a constant named InitialFeedback which is as follows. Then say first name is an empty string. Last name is an empty string. Telnum is an empty string. Then email also an empty string. Agree is false. ContactType is Tel, and message is an empty string. Now, once we create these forms, then we go into the ConfigureStore and then configure our Redux to be able to store the form. So this is where we take the help of the create forms from React-Redux-Form. So the create form enables us to add this form state into our store. So how do we add? So, in here, the create forms will create a reducer but takes care of the form. So, we go in into the combined reducers that we define here and then all that we need to do is say...createforms, and then inside the create forms we supply feedback as initial feedback. So we will import the initial feedback from forms here. So as soon as I use the initial feedback, visuals will record automatically imported that from forms. So, once we import the initial feedback and so if we initialize it like this, this we'll add in the necessary reducer functions and also the state information into my create store. So as you recall I mentioned that the React-Redux-Form brings in its own set of support for all these on our behalf, so we don't need to write our own reducers or our action creators and so on, React-Redux-Form fills in all the details by itself. So once we do this, then, in order to make it available to us. Now the reason why we supplied this initial feedback is that we can reset the form to its initial state after submitting the form. So, in that case, recall that even if you reload your component your form state will remain as such. So, when you submit the form, you want to reset the form. So, for that, I need to add in a new action. So going into the main component, in the main component, I will import actions from React-Redux-Form, and once I import that, then I can add in one more dispatch here saying "resetFeedbackForm" which basically adds dispatch(actions.reset('feedback')). So the form will be named as feedback and so these actions that we import from React-Redux-Form adds in the necessary actions for resetting the form which we will label as "feedback." So the corresponding model will be called feedback. We'll update the form to do that in a short while. Once we do that, then we go into the component. So because we are using this form in the context component, so, in the context component, we are going to update this to see. Now because we need to pass in an attribute to the context component, so that's why I need to change this to say "contact" and then resetFeedbackForm= this.resetFeedbackForm. So, that's how I need to update contact around here. So, look at this box. We have updated it by turning that into an arrow function which allows us to send this attribute as a property to the contact component. My mistake in the main component, This should say this.props.resetFeedackForm rather than this.resetFeedbackForm. Once we complete this let's go to the contact component. In the contact component, we have imported control, localforms, and errors here. We are going to update this to say "control form." We are no longer using the local form and say "control form errors" and then we'll also import actions from React-Redux-Form, and then going down into that handleSubmit. Now, here we did the console log and alert here. Then after this you will see this.props.resetFeedbackForm. Now, going to the form itself. Now, since we are not using the local form but instead using the form, I would update this to saying form and then we'll say model="feedback" and then going down below here, we have to update this to also just say form. That's it. Let's save the changes and then go and take a look at the new behavior of our form in the contact component. Going to the application of the browser, let's move to the contact component. in the contact component, you will see that the form exists as such. Let me type in some information in the form. Then midway through filling the form, I will navigate a way to another component, a couple of other components, and then I'll come back to the contact component, and you will see that the form will still remain filled in from what I have filled in before. So even though I have moved away from this view and then came back to the view, since this form state is preserved in the Redux store, I'm able to see that the form state is preserved even though I navigated away from this view. Now let's go ahead and submit this form. So, when I submit the form you can see that the information is reflected in the alert message as shown here, and when I click on the "Okay" you now see that the form state has been reset back to its empty state as before. So that's the reset feedback from function to be implemented, initiating the action to reset the form there. So that's the way the React-Redux-Form helps us to manage forms on our behalf. Now, in order to convince you that the React-Redux-Form is actually saving this information in the state of our Redux store in the Redux store, let's pull up the log here. When you pull up the log, you can go through the log from the beginning to the end so you will see that you have a dishes loading that was done here. You have an add dishes that was done here. Then there are a bunch of RRF's sent errors that are, whatever you see as RRF is from React-Redux-Form. So, these actions are all done by the React-Redux-Form on our behalf. So in between if you go to any particular state at any given point of time, you can see that this feedback state has been added in here then this feedback state is tracking what we typed into the form here. So that's how we're keeping track of the form state to one more here. So that's how we are keeping track of the form state in the Redux store. With this, we complete this exercise. In this exercise we have seen how we can use React-Redux-Form to store the form state in our Redux store, and be able to process the form state even when you navigate away from the view which contains the form and then come back again, and when you submit the form you can reset the form to its initial value. This is a good time for you to do a good commit when the message, React-Redux-Form revisited.