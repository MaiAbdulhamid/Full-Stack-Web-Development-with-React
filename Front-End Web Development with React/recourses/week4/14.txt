We post data to the server to add new resources to the server. In this exercise, we're going to make use of the post operation using Fetch to post a comment to the server and add it to the list of comments already on the server. So, this involves modification to the data on the server site, and in turn, when the data is modified and then the updated data is Fetch, and then pushed into our Redux store, so that the update is reflected into our Redux store and thereafter, reflected into our view, when the Redux store gets updated. So, let's go ahead and make use of the post operation using Fetch. To perform a post operation to post a comment to the server, let's open the ActionCreator.js file. In here, we have already seen how we added a comment to our Redux store already. We're going to modify this comment such that this ADD_COMMENT will simply receive a comment and then push that into the server. But, before we do that, we will add another action creator called postComment. Which indeed takes exactly these parameters as the parameters for this action creator. And then, it well perform the post operation on the server. So, once I move that in here, the addComment itself now becomes more simpler, it will just receive the comment. Now, this addComment is no longer going to be used the way we have done earlier, but instead the addComment is going to be used by postComment to push the comment into the Redux store. So, this addComment method will now become a lot more simpler. So, here the payload is simply comment here. Now, this also means that we will have to update the reducer, but we will do that as later step in this exercise. So, here when we receive these four pieces of information as parameters to the postComment, what do we do here? So, in here, we will create a new JavaScript object, and then map the various parameters that we received into this JavaScript object. Then, we will add, for this we will add another property called date which we will set as new Date().toISOString(). So, we will add in the date right here in the postComment. After that, we will post this comment to that server. So, to post a comment to the server will say, "return fetch(baseurl + 'comments')". So, we are doing a fetch operation on this, but in this case this is going to be a post operation. So, how do we do a post? So, when you do a post, you need to supply the value inside here. Now, when you don't specify the method that we are using, it will default to get. So, here I specify the method as POST, meaning that this operation is going to be a post operation. Then, we will enclose the body of the message into the body that they will send out. So, to enclose this comment that we have just created into the body of the message, will say, body: JSON.stringify(newComment). So, we'll take this JavaScript object, and then turn that into a JSON, and then put that into the body of the message. So, recall that a post operation requires you to send the data in the body of the message. Now in addition to the body, we will set up few headers and the header that will set up is 'Content-type': 'application /JSON'. Now, recall that the body contains the data in JSON format. So, we need to specify that here in the header. And then, we'll specify the credentials as the 'same-origin'. Now, this question the, 'same-origin' part, we will deal with that in the Node.js course, where we will look at 'same-origin', and cross origin and so on. So, for the moment that is something that we need to specify there. Ten we will leave it there. Now, when we perform this fetch operation, so this is what defines the structure of the request message that is going on. So, the body is specified here, the header is specified here. So, when this fetch operation is carried out, obviously you will receive a response from the server. So the then part where we handle the response is very similar to the way we did that for the get operations that we did earlier. So, I'm just going to copy that from there and then paste it into this here. So, it's the same then operation that we're doing. So, then(response => { if (response.ok) { return response; } else as you can see var response, error status, and so on, throw error, and throw error part here. Then after this we will do exactly these things. So, I'm going to add in the then part from here. Then, after that with the response will see then. Dispatch addComment. So, this response coming in from the server will contain the updated comment that has been posted to the server site. Now, when the comment is posted on the server site, the server will include an ID into the comment and then it'll send back the updated comment here. So, that will be posted into my redux store by dispatching it as shown here. Then, the error part. If we encounter an error, then we'll just simply do console.log, post comments. So, we'll just print out the error message on the console log here. Then maybe, we may just want to alert the user saying, "Your comment could not be posted," and \nError, error.message. Now, this is optional. I just included it in there, so I'm just going to show and alert to the user. You can just simply do a console log and then leave it there if you preferred. So, that is how you're going to be posting the comment to the server there. So, you will create a post message, send it to the server, and then when you receive the response, that response should be the updated comment, and that'll be pushed into the redux store by doing the dispatch here. If there is an error, you will just print the error in the console log and then pop up an alert message for the user. Minor correction here. This should be dispatch. So, since this is a punc, I need to add the dispatch here. So, I'll send the function of a function here. That's important to update correctly. That's it. So, that's how you will handle the posting of the error. Now, how do we make use of this? So, to make use of this, first of all, I need to update my comments.js file in the reducer. Now here, when you receive the comments, so the comment ID is automatically created by the server, so that'll be all automatically included there. So, I can remove this from the addComment, and then similar to the date, we've already put that into place in the postComment, so I can remove that from there. Then, this will take care of adding the comment into the redux store that we have. So, as you can see, when you post a comment, you will first send the comment over to the server, and if the comment is successfully added on the server site and the server sends back a success of the posting of the comment, only then you will add it to the redux store. So, that way, you ensure that the comment posted by the user is actually reflected by changing the data on the server site before even adding it to that redux store. So, that's the way I am arranging this in this case. So, after having done this, let's now move into the main component, and we will have to make this postComment available for our viewers here, going into main component. Now, this addComment will no longer be directly accessible from the main component. Instead, if you want to add a comment, you will post the comment. So, we'll just say postComment. The addComment itself will be used by postComment in order to add to the database. So, we'll say postComment here, and then we'll come down to the method definition here, and then instead of the addComment, we'll change this to postComment. So, postComment, dishID, rating, author, comment, and this will dispatch the postComment rather than addComment. So, that's the minor update that we will do to the main component. Also, when we send this to the DishDetail component, instead of addComment, we'll send this as postComment, and that should take care of that. Then now, going into the DishDetail component, in the DishDetail component, we will go in, and whenever we use the addComment, we'll change that to postComment. So, minor updates to DishDetail component, postComment to the current form, and then when you post it in the comment form, it'll say this.props.postComment. So, every use of the addComment here should be replaced by postComment here. Then also, at the bottom, when you send the addComment, you will put postComment here. Just to make sure that I have updated everything, let me search for addComment. So, I'll replace every addComment to postComment, so all my updates are completed. So, let me save the changes. Then, our application should be ready to accept a comment being posted. So, let's go to our application in the browse. Going to our application in the browser, let's now go to a specific dish. So, for this dish, let's submit a comment there. So, we'll say four, and you'll see that the comment gets added into your view there. The new comment that you just posted gets added into the view there. Now, this also means that this comment is also added to your server site. To check that out, let's open another browser tab and then let me check the comments in there. Localhost, sorry, 3,001 comments. Then, if you check this comment here, you will see that the new comment that I just added is at the bottom here. So, you can see that the new comment has been just added here and has been assigned a new ID of 20. So, you will see that your database on the server site, the db.json file will be updated with the addition of this new comment, and then that'll be reflected in your view here. Also, they can check there. Since we have our log running here, you can go into our logger's output here, and then you'll see that down below here, the addComment action was called at this point, and in the addComment action, when I opened the action and the payload, you can see the payload for this addComment action. I think this is exactly the comment that we just added and that has been pushed into my state. So, earlier, you saw that the comments was an array of 20 items, and then when I checked the next state, you'll see that the comment is an array of 21 items. So, the new comment has been pushed into my redux store right at the point. So, that demonstrates to you how the post operation can be used to post information to your database. Now, even if I reload my page, the comment that I added will still be there. Now, the earlier implementation, you saw that when you reloaded the page, the comment disappeared. But now, since this comment just persisted on the server side, so the comment will remain as such. So, your db.json file has been modified, so it'll be persistent even if you restart your application. So, with this, we demonstrate how you can post items to your server from your React application using the fetch. This is a good time for you to do a get comment with that message, fetch postComments.