Animations in the user interface adds a lot to the user experience for your application. Subtle animations that give visual feedback to the users, definitely add to a better user experience. In this lecture, and the exercises following this lecture in this lesson, we will examine how we can add animations to our React application. Even before we look at animations, let's see some examples of animations that can be done in our application. So, here we have our React application to which I have already added animations. So, here when we navigate from one view to another view, so you can see how your various views are slowly staggered into place or slide into place as we navigate from one view to another view. Similarly, you can see that when you come into the home component, the cards pop out of the screen and before being rendered on the screen. So, this subtle animations that get added to your application, adds a lot of user friendliness to your application, and people appreciate these subtle animations. Of course, some of these may look not so subtle to you, but I sort of exaggerated some of the animations just to show you what can be done, right? Indeed, I am no expert at doing animations, so please don't use the examples that I show you as any way as a representative of what animations can be done. Instead, treat them purely as illustrations or examples of how to go about doing animations. I will leave it up to the designer in you to come up with good animations for your own applications. So, how exactly do you support animations in React? Now, if you type React animations in a Google search bar, you will find plenty of NPM packages that support React Animations. So, how do you separate the good ones from the bad ones or some things that are more easier to use? Well, I will let you explore several of them and decide which ones suit your way of doing animations the best. In my case, I explored several React animations libraries and then came up with two that I liked the most, and those two I will present in this lesson in the next two exercises. The two that I selected to explore further are React-transition-group and React-animation-components. Now, the React-transition-group supports React animations through a set of CSS transitions that we can express using CSS classes. Now, the React-transition-group used to be part of React in some of the very old versions of React, but there after has been separated out into its own NPM module called as React-transition-group. So, now if you want to use it in your React application unit, explicitly install that and then make use of it in your application. Let's see how we make use of React-transition-group and React-animation-components. The animations that you just saw in the example that I showed, uses both React-transition-group as well as React-animation-components. So, how does React-transition-group work? The React-transition-group provides a set of components that enable you to manage components tips including mounting and unmounting. So, they help to recognize when components are getting mounted and unmounted, and then they are designed specifically with animation in mind. The components supported by the React-transition-group include a transition, a CSS transition, and a TransitionGroup, each meant for a specific purpose. The transition is a generic transition and it lets you describe a transition from one component state to another component state over time. Now, when you define component state, the transition component has four states that it goes through: the entering, the entered, the exiting and exited state. So, whatever you put inside the transition component, you will apply the corresponding transitions when the enclosing children are being rendered, or mounted, and then unmounted. So on that point, the transitions are applied. So, this is used for animating the mounting and unmounting of a component, or the children that you enclose inside your transition component. Now, here, the transition when you apply, uses a in prop which is used to toggle the transition state. So, when the in prop goes from false to true, then you begin the sequence of state transitions from entering to the entered state. Similarly, when you turn the in prop from true to false, then you are triggering the exiting state first and then on the exited state. Now, you can specify a time out period for the time the transition dwells in the entering state before it enters the entered state. So, once it is in the entered state, the transition is complete and then your component is tably shown, and then when you are unmounting the component, then it will also trigger the exiting state and then the exited state in that sequence. So, you can specify the time out for it. Now, we will see how we make use of this as we go through in the course. The CSS transition is something that you apply together with the transition. The CSS transition applies a pair of CSS classes during the appear, enter, and exit stages of that transition. Now, this also uses the in prop to decide which transition class to apply. As an example, if you are applying the CSS transition to list items in a list, you would specify something like this. If you're applying it to a specific item, not in a list, but a generic React element, then you will say CSS transition, and then you have explicitly specified the in prop for the CSS transition, and the in prop, you'll specify some value to it and when the value turns to true, then you go from the entering to the entire state and then similarly, from the exiting to the exit state when the in prop goes from true to false. Now, the class names, again note, it is not class name as we have been using so far. The CSS transition has a property by name class names, and the class names takes a value there. So, for example, in this example, we give a class names as page. What this means is that, it will take four CSS classes which you will define in your CSS5. The four classes would be page enter, page interactive, page exit, and page exit active. Now, the page enter will be applied when you go into the entering state, and then when you reach the entered state, the page interactive will be applied, and the page exit and exit active as you would expect. These CSS classes have to be specified, and within those CSS classes, you'll specify what kind of transition you want to cause. You can change the opacity, you can do the transformation, so x and y transformation on your elements and so on can be applied. In the example, you will see me doing exactly that. Then I define the CSS classes, I will be applying both the opacity and the transform, and then apply both of these as transitions to my components there. The transition group is the component that the React-transition-group supports. The transition group manages a set of transitions that you apply to a list. So, if you are applying to a list, then you know that the list items may come in and go and so on. So, for example, if you have a long list and then you add a new item to the list and you wanted to animate the entering of the new item into that list, then the management of that, by using the transition class, that if you enclose the entire list in a transition group and then apply the transition to each list item, then the in property of the transition and the turning of the in prop to true and false will be controlled by the transition group. So, it automatically toggles the in prop for the components that are enclosed inside it. So, if you apply to a list each list item, the in prop will be toggled as required. So, if you add a new item into the list, let's say, for example, your data changed and a new item just got added into the list, the new item will animate itself into the list in the view by using the TransitionGroup. You'll also see me using TransitionGroup and indeed, I will use TransitionGroup for transiting between the various views when I navigate using my React cloud or so from a single page application. The sliding in of the views is exactly caused by the TransitionGroup and the CSS transition. React-animation-components is yet another package that supports animations. It supports a set of react components. React animation components are themselves implemented using React-transition-group, and so they have packaged these into a set of easily usable components that apply certain properties. So, these provide drop in animation features for your application and they make use of the GPU for accelerating these animations. Now, the animation components that are supported by the React animation components include Fade, Transform and FadeTransform. So, you can apply the fade component to do a fade on a React element, fade in or out. You can do transform to transform the component x and y transforms on the component or the size and so on can be controlled by using the transform component, and fade transform allows you to do both fade and transform together at the same time. Now, similarly, for a list item for example, you have wrapper components called Stagger, Random and Loop. If you apply Stagger to a list of items, the items will stagger into the list, so when the list is being laid out on the screen, the items will be laid out staggered on the screen. And that provides a nice animation experience when you're rendering a list of items. The Random will randomly add delays when you're rendering items in a list and that's it. Again, yet another interesting way of applying animation to your list of items. The Loop will essentially loop through and perform the animations continuously. So, for example, if you apply a loop on inside that you apply a fade animation component, the item, the React element that you enclose inside will be fading in and out, and in and out continuously. If that is the kind of experience that you want on your user interface, that's something that is useful for apply. Now, you will see me using the React animation components also in the second exercise in this lesson.