Now that we have briefly examined webpack in the previous lecture and also learned that react scripts make use of webpack for helping us build our react application for deployment, in this exercise, let's go ahead and build our application for deployment on a Web site. If like me, you are curious about react scripts, then let's begin our journey in package.json file. So if you're going into package.json file, you will notice that react scrips, right there, has been installed by our create react app. Then the scaffold out our application and it is installed as a dependency for our application. Also, when you look at the scripts down below here, you will see that react script is being used for performing various operations within our project here. So we can see that when you type in 'npm start', it actually invokes react scripts start. Similarly, they will see that they can build a folder for our react application by using scripts react scripts build and similarly for test purposes which will examine a little bit later. Now if you want to know exactly how react script works, then by all means to satisfy your curiosity, you can go into load modules folder and then scroll down to the react scripts folder down below here. And then in the react scripts folder, you can go and read more about the react scripts folder. And of course it is not meant to be used by itself, it is meant to be used as we see through the package,json file, but if you're curious you can go in and see the reactscripts.js file. So as you see this is nothing but a JavaScript application that is written to help you perform various operations within your react project. And this in turn, invokes a bunch of scripts that are built here. So if you want to know how the start script works, you can open this start.js file and then look at it. Be careful not to modify any of these files because they'll end up breaking your project. So don't modify any of these files by any chance. Similarly, the build.js file will give you details about how the build process works. And if you go into the build.js file, you will actually see that this is requiring webpack here. So, that essentially shows you that react-script is actually making use of webpack for building our react application. So with that quick tour react scripts, just to satisfy our curiosity, lets move on to see how we will build our react application. To create a build folder for our react application, at the prompt type npm run build and as you already understand, this will run the build script from our package.json file, which essentially invokes react-scripts with the build option, and that will end up building our application for deployment. Now before we do that, let me just check the console here to see if there are any linked errors that are shown here. Now as you can see these indicate that these are extraneous and can be deleted. So let me go ahead and fix up these files here. So in the ActionCreators.js file. So going to the redux ActionCreators.js file, I realize that this is not required anymore. And then also, one more comment that I saw was that the errors at line number 168. So we'll change that to error mess here and then errmess here so that it won't throw the errors there. Similarly in the MainComponent.js file, we see that this constructor is unnecessary because we are not doing anything inside the constructor, so I can just go ahead and remove that constructor. And then also, in the ContactComponent, I am importing these actions here but I'm not using it for anything, so let me go ahead and remove that and save the changes so that all those errors will disappear. All those linking errors will disappear. So now once I go to my terminal you can see that all those errors have disappeared, so this is a good time for me to do the build. So at the prompt type npm run build and then let's go ahead and get that build folder for our application, create it. So, this will take a little bit of time for react-script to configure and build our build folder for our react application. So let's wait patiently for a while for this build to complete. And once the build is completed, then you would see a set of things being printed on your terminal or your command window. So you can just quickly read through that to understand what has been printed there. You can see that some main.js and main.css files have been created somewhere and we'll you go, and look at what has been created in the build folder in a minute. So once the build completes, then let's go and take a look at the build folder. Going to our project, you will now notice that there is a new folder here named build here. And if you go into the build folder, you will see the index.html file already minified and uglyfied and then put in place there. You will also see that there are some static resources here. So you will see some CSS files here which is a concatenation of all the CSS's that we're using in our application. That's one part, and then in the JavaScript, also you can see that all the JavaScript code that is required by our application have all been concatenated together into a single JavaScript file here. And then in the media folder you'll see all the font files included in there. And then in the assets, you'll see all the images that you were using included in there. And as I mentioned, you only use the logo.png, all the remaining ones we are anyway downloading from the server so we can remove all the ones and leave just the logo.png in place there. So, you can now see that our build folder is built up by webpack to contain all the files that are required for setting up our react application. Our next step is to just copy the contents of the build folder into our web server and then the web server will be up and serving up our react application. Fortunately for us, we already have a Json server running up and running, and we know that the Json server, whatever you put in the public folder will serve up as static files from the public folder. So why not take advantage of the presence of a Json server and then use that as our web server to serve up our react application that we have just built. So to serve up the react application that we just built, lets go into the react folder of our project and then go into the build folder and then let me just copy all the files from this build folder, and then I will go to the json server folder and then into the public folder. I'm just going to copy all the files from the build folder of my react project into the public folder of my Json server. So with this, my Json server should now start serving up my react application. Now to verify that that is what indeed it is doing, let's go to the browser. In the browser, let me open a new tab and then type in localhost:3001. So that is where our application was installed. So you know that the localhost colon 3001 is where the json server's static web server is running. So lets go and browse there, then you'll immediately see that your react application is indeed being served up from that location. So this is the react application that we've built using the react scripts build in the earlier step here and you would notice. So let me turn on the developer tools, so that I can show you the complete image of the site here. So here you see that this site is being served up by my Json server based on the files that I copied into the public folder from the react application's build folder that I just built. And you see that this application works exactly the same as the react application that we just built. So you can browse to the various views of our application and see our application being rendered just like what we created in the project. So now you see how we can easily make use of react-scripts and use the build command to build our distribution folder and then just copy the files into our web servers root folder and then your react application is up and running in no time. This is a good time for you to do a Git commit of your project. To just save all the changes that you made to those specific files there. You don't need to commit the build folder because you can always rebuild the build folder by just typing npm run build. So you don't need to commit that to your Git repository at all.