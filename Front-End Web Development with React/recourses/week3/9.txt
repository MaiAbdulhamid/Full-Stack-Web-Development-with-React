In the early part of this module, we had already seen the use of controlled components first. Designing controlled forms where the state of the form is reflected into the state of the component and also we saw the uncontrolled forms where the state of the form is retained in the dome itself. Now, with the introduction of redux into our react application, we can take advantage of the availability of the redux store in order to process the information within our form into the redux store. Now this is where the new package called react-redux-form comes to our aid. It provides you with a lot of features that enable you to leverage redux for your form persistence and also form validation. So what exactly is React-Redux-Form? This is a versatile, fast and intuitive library for creating complex and performant forms in React using Redux. Now, the React-Redux-Form itself persist the state of your form into a model in the redux store. And React-Redux-Form also provides a collection of reducer creators and action creators for us that enables us to do all this work for us without writing much coat. Now that's where the React-Redux-Form takes care of all the grunt work behind persisting the form in the Redux store. Now, why would you need that? Say, for example, you are on a view and you're filling out a form and then you navigate out of the view. Now very often when you have standard react components, when you move out of a view, the state of the, whatever local state that you stored in that component will get destroyed. And so when you return to the same view, if you had filled up a form, the form would remain unfilled and deployed. Suppose you want to persist the state of the form even across page reloads or as you navigate in and out of a view, then React-Redux-Form would be of use to you. So, this is achieved by the form data being stored in the redux in a model. And all the details of how this persistence is done is automatically taken care of by React-Redux-Form without us needing to do any reducer functions or the action creators on our behalf. And also, React-Redux-Form brings in its own support for validation as we will see in one of the exercises that follows this lecture. If you want to use React-Redux-Form purely for its form validation and not require the form data to be persistent in the redux store, instead if you want it to be persistent in the local state of the component, then you can simply use a local form that is also supported by React-Redux-Form to create forms. This is suitable when, as I said when you don't need persistence across component mounting/unmounting in your application. So, that's the advantage of using local forms. So initially you will learn about how to make use of React-Redux-Form by creating local forms and then in the next module, we will see how we can leverage the persistent support of React-Redux-Form for some of our forms in the react application that we have been working on so far.