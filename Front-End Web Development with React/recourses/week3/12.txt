In the previous exercise, we have already seen the use of React Redux Form, and how we designed the form in the contact component to make use of the local form from React Redux form. In this exercise we will see how we can make use of the form validation support from React Redux form within the form in our contact component. Going back to the form in our contact component. So in the contact component, let me define a few functions that can help us to do validation. So the first function is defined as required, which receives a value as a parameter and then it checks to see that the value is greater than zero. The next function that I will implement is called Max Length, which receives a length as a parameter and also receives the value. You notice how we define the arrow function here, so length, arrow function, val, arrow function, which is a function of functions that it returns here. And then so this will check not val or val.length is less than or equal to length. So it ensures that the length is less than or equal to the length value that I specify as a parameter here. So this is the maximum length. So this enables us to check and make sure that the length of the value entered in the input box is below a certain value. Similarly, let me introduce a Min Length function here. So for the Min Length function, we'll say Val and, so you want it to be greater than zero so that's why you say val and val. length is greater than or equal to length. So that's how we test for the minimum length, then the next function that I will defined is, Is Number. So we want to check to see that whatever it is there is a number, so val. length so will check isNaN. So whether the value is the reserved value or not, so we say Number val. So that's how we check to make sure that is a number. And then the last one, we check to make sure that whatever is entered is valid Email. So we'll say Valid Email, so when you receive the value, you check to ensure that it begins with A to Z, zero through nine dot underscore percentage plus minus and then plus. We'll check to see if there is an at sign in there and then following the at sign we'll say A to Z or zero through nine any number of times. So this pattern essentially specifies that the pattern will repeat like that, zero through nine and dot and then backslash dot. So there is always a dot following that you would have an A to Z, so something from A to Z at least two or maximum of four characters. So that's typically the last part of your email address would be a dot com dot org or something like that. But the maximum value would be of two to four characters, because you remember that the last part is usually two to four characters in your email address. Then so we'll say dollar flash i.test val, so we are just supplying that this regular expression here, and then just making sure that that matches the regular expression that we have specified there. So that's what we are checking for in the valid email there. So pure redux checking there. Now, how do we make use of these in introducing their form validation? So going into our form, for each of the items in our form, so let's start with the First Name. So for the First Name, we will specify the use of the form validator, so in here, in the control text we will go in and say the validators that we will apply. And the validators that we will apply here is required and then minLength is minlength three. So which means that at least three characters and then maxLength is maxLength15. So we'll allow from 3-15 characters in there. So that is how you apply to validator. Now below the control, you can make use of errors to specify the errors that you want to display here. Inside the errors will specify, className is text-danger. So, the text-danger from bootstrap renders this in red color. So, I will say text-danger and then the model is First Name and then show is touched. So, you will show this message only after the item is touched. If not, this messages will not be shown. And then finally, the actual messages that need to be displayed. What are the messages that need to be displayed? If the required is true then, we'll display the message as required, and then if the minLength is true, we'll say, "Must be greater than two characters" and then the maxLength will specify, "Must be 15 characters or less". So that is how you specify the messages. Now for each of these, the corresponding validators we've specified here, required. So, if this evaluates to true, then this will be shown and similarly, for the remaining two here, and the corresponding message that needs to be shown here. And this errors is applied to the model First Name, so that's what we're using here and then the show touched. So that's how you apply the validators here. Now, we will apply the same validators for the Last Name. So, let me go into the Last Name and then copy the same validators, and then the error fill also will apply exactly like this. So, let me copy the errors from here and then come down in to the Last Name part, and then copy the errors in there and then this would be for Last Name. So, we have updated the First Name and the Last Name. The next one would be for the telephone numbers. For the telephone number, we will apply the same validators, including one more, so we'll apply the validators like that, and for the telephone number also, we'll come down to the telephone number here and then apply the validators as required, minimum length is three, maximum length is 15, and then the last validator we'll apply is isNumber validators that we have defined earlier. So isNumber, so that will check to ensure them this is a number and the number should be either three up to 15 numbers in the telephone number field, and then the corresponding errors. So, let's define the errors here, we'll copy the errors from the Last Name and then come down here and then apply that errors here, and this would be for telephone numbers touched, required must be greater than two, must be greater than two numbers, notice that this is numbers must be 15 numbers or less, and then the last one would be isNumber, so must be a number. So, telephone number should be a number, so that's what we're putting in here. Now, for the e-mail, what are the validators that we will apply? For the email we'll apply only two validators here. We'll not check for the minimum and maximum length. The email pattern checking is already doing some for us. So, we'll come in here and then apply the validators as required, and then we'll apply the second validator as valid email. So that's the second validator that we will apply and the corresponding errors that we will display is in the errors, we'll come down here and then display the errors as saying, the model is for email touched and the errors is required and then the second one would be for the valid email, we'll say, invalid email address. That's it. So, we're going to do validation just for these four fribs. So, with this changes applied, let's save the changes and then go and take a look at how phone validation is done using the react-redux-forms. Going back to the browser, we see the form in here, let's start typing in the form. So, I put in one character, so you immediately see the message there, and then the moment I type three characters, you see how the form validation is popping in for this one. Again, if you remove all, then you'll see the required message there, same thing will apply for the Last Name also. So, let me type in something meaningful. Let's see how the contact telephone number works. So, again, you notice that it will not work. Then if I type in three numbers then it works, and then again, you'll see that it should contain minimum number of numbers, and then the email, let's see how the email validation works. So, you see that if you type in a simple character, it doesn't work, that doesn't work either but the moment you put in a@, so this works fine. So, you notice that after the dot you should at least have, so you see that the last part should contain 2-4 characters. So, that's how the email address is being validated, and lets type in something and then when we submit your form information pops up as shown here. So, this is how we can leverage the form validation that is built into react-redux-form in order to validate the information that we type into our form. With this, we complete this exercise. This is a good time for you to do a git commit with the message react-redux-form validation.