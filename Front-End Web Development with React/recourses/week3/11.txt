Having briefly examined React Redux Form, let's move on to our exercise where we will make use of React Redux Form to update the form that we've created in the contact component in our React application. To get started on this exercise, go to your project folder in the terminal or command window and then install React Redux Form by typing yarn add react-redux-form@1.16.8. Once React Redux Form is installed, then let's go ahead and update that form in the contact component. Going to the contact component, within that contact component, we were earlier importing the Form, FormGroup, Input from React strap. I'm going to remove all these and also form feedback from React strap. We'll only use label from the React strap, and we'll now import Control, LocalForm, and Errors from react-redux-form, and we will use these to update our form. Now that you have imported these from our form, we will no longer need the state to be explicitly stored in our application because the state will become managed by react-redux-form on our behalf. Also, we don't need the handleInputChange anymore because that is also going to be managed automatically by react-redux-form on our behalf. So, let's remove that from our application, and then also the handlerBlur is not needed because that will also be taken care of by react-redux-form on our behalf. So, you see that all these are no longer required. The handleSubmit will be retained but we will update it a little bit later, and the validate also is not required because that would also be done by react-redux-form on our behalf. You don't need to call the validate here. So, you see that much of the work is brought in by react-redux-form on our behalf. Now, to update our form to use react-redux-form, let's go to our form and then update this as LocalForm, and when we submit it in the onSubmit, we will implement this as a arrow function here, values, and then we'll say this.handleSubmit(values). So, this values will be passed to your handleSubmit automatically by the application here, and while we are at it, let's go down to the bottom here and then update this to LocalForm. Now, within each of these, the form group, they will turn this into Row, class name is form-group, because we are no longer importing the form group from React strap and instead we will make use of the row and column classes here. So, every form group that we have, we're going to replace that with the row with the form group class applied to it, and this is nothing but the form group class that bootstrap supports, and then so this would be the form group would be changed to Row here. So, every form group that we have here, I will update it to Row. So, with any of the form, all the form groups are updated to Row, and the labels themselves be as such. We won't be using the form feedback anymore so, remove all the form feedbacks from these instant. In the next exercise, we'll come back to replace this by what is supported by the react-redux-form, so we'll remove all those, and imputs themselves will be changed to Control.text, so this will become Control.text and we no longer need the type="text", and we'll say model is ".firstname", and id would be, id and the name, we can retain as such, and the placeholder. For this, we will apply the className as form-control so that we'll apply the bootstraps styling for this control here. Similarly, you make similar changes to the remaining input types here so this will also change to Control.text with the model as.lastname, and also apply that className as form-control. Similarly, this one will become Control.text and the model is.telnum, and className as form-control. Now, also, I realize that for each of these, we need to remove this value, valid, invalid, and onChange part because those are no longer needed. They will be automatically handled by react-redux-form. So, let's remove all these from each of these, and the next one is, of course, the email. So, here, this will also be Control.text and model is ".email", and remove these and then add className as form-control, and then the next one for this particular item there we have the checkbox. They will update this as, into the form check here, we will change this to div className="form-check" and the div, and this one, we will change that to Control.checkbox and the model is ".agree" and that will apply a className as "form-check-input" and remove that part. Then coming down to the next one, this, we will change this to Control.select and the model is ".contactType" and also, we'll apply the className as form-control, change this to Control.select. Then coming down to the next one, we will change this to Control.textarea and the model for this is ".message" and the rows remain as 12, and we'll change this to className form-control. The last one would be as such, submit and primary feedback, and so on. Let's save the changes. Now, while we are at it, we need to update this handleSubmit. This handleSubmit now will receive values as we saw when we implemented it, so it will receive values. So, on the console, because we no longer have the state here, we'll be printing out their values from the handleSubmit, and also remove this event.preventDefault because this is no longer needed. Let's save the changes and go and take a look at our form. Going to our application in the browser, let's go to the Contact page, and in the Contacts page, you will see the form rendered just like before. Let's fill in some details, and then submit the form here. Let me make some changes, and then submit the form, and then you would immediately notice that the alert pops up showing all the details as we fill them, so you see that the first name, last name, telnum, and so on. So, by specifying the model with the specific names that we have shown there, you notice how the state information is automatically being reflected into the forms so when you submit, the handleSubmit automatically shows the form information. So with this, we have seen how we can use the local form support from react-redux-form to update our form to show the information as seen here. This is a good time for you to do a git-commit with the message, react-redux-form.